wcnt-1.1001/jwmsynth  

// wcnt files are identified by the above line, Which now 
// incorporates the version number.  If it is not on the very 
// first line, wcnt will abort reading the file.  A second 
// 'wcnt-1.1001/jwmsynth' line tells wcnt to stop reading the 
// file, regardless of remaining file contents.

// comments can be placed anywhere to tell wcnt to ignore the 
// rest of the line. Use spaces and tabs as you wish.

// most of this file is made up of comments, but new users 
// will hopefully find them helpful.  If you don't understand
// the details, just know that this is how wcnt works.....hmmm

// header info next, in this order:

samplerate 	44100
bpm		160
signature 	4/4

// end of header.

// modules can be defined in any order, and they can use outputs
// from modules defined later in the file.

// modules always follow this structure:

// module_name
// user_name
//	module specific data ...
// 	inputs  ... 
//      parameters ...
// user_name

// the second user_name is the identical to the first and is
// used to terminate the module definition.  Input names take
// the form in_inputname.  Some modules will not have module
// specific data, some will not have inputs, and some will
// not have parameters, but all will have at least one of the
// three.

wcnt_exit
wcnt_exit_module
        in_bar  time1 out_bar	// input to 
	exit_bar 2		// parameter
wcnt_exit_module

// the wcnt_exit module tells wcnt when to exit.  it has one input,
// named in_bar, which is how it knows which is the current bar.
// it has one parameter named exit_bar which is the bar when
// the start of which is reached, wcnt will finish processing.
// By the way, bar 0 is the first bar, bar 1 is the second.
// if you try and create more than one wcnt_exit module, it will be
// complained about as an error, and rather abruptly stop.

// time_map module
time_map
time1  
        time
        time
time1

// some of time_map's outputs:
// out_bpm 		- the beats per minute or tempo
// out_bar 		- the current bar
// out_bar_trig		- ON for first sample of a every bar, otherwise OFF
// out_pos_in_bar	- position in the bar

// a time map needs to be created even if you don't plan on
// making any signature or bpm changes.  Just leave it empty
// like time1.  time signature and tempo changes are placed
// within the two time's.  the module has an initial
// time signature and bpm at bar zero (the first bar) which it
// takes from the header info

// clock module
// the clock module provides the basic mechanisms which a wave form
// module uses to know at what frequency to generate

clock
clock1
        in_freq_mod1	off	// no frequency modulation today, thankyou.
        freq	440		// cycle at 440 hrtz, or 440 times per second.
        freq_mod1_size	0.00	// how much to modulate the frequency 
clock1

// some outputs from clock
// out_phase_trig	-	ON for one sample at the start of a cycle.
// out_deg_size		-	how many degrees for frequency is = to 1 sample.

// sine_wave	a sine wave generator uh huh
// i'll explain later....

sine_wave
swave										
	in_phase_trig	clock1	out_phase_trig
	in_deg_size	clock1	out_deg_size
	recycle_mode		off 				
	on_trig_reset_phase	off 				
	phase_cycles 1.0					
swave

// mono_amp
// a waveform such as sine_wave needs to be amplified in order for
// it's signal to be compatible with the wavfileout module, which
// creates the wav, the purpose of this file and wcnt.

mono_amp
amp1
	in_signal	swave	out_output
	in_amp_eg	one	out_output
	in_amp_mod	off	// no amplitude modulation
	amplitude	32767	// 32767 is the maximum amplitude
	amp_mod_size	0.00	// how much to modulate amplitude
	clip_level	25000	// the maximum allowed amplitude
amp1

// mono amp converts a signal specified by in_signal from a floating point
// signal with a range of around -1 to +1, to a 16bit integer signal with
// a maximum range of -32767 to +32767

// when you look at the output file, you will notice that the waveform has
// had the top and bottom chopped off, this is because of the clip_level
// parameter.

// in_amp_eg provides amplitude shaping, here it uses the constant module
// defined below, as there are no defined ADSR envelopes.  I did initially
// set it to off, and wondered why the output was silent, oops.

// setting an input to off is really just a con on my part.  when an input
// is set to off, it gets an output from a nonezero module. the output of
// course is always 0.0, or in the case of a trigger, off ie never on.
// the user is not allowed to create a nonezero module, it would be very
// pointless, as wcnt creates one by default.

// constant module
// this module provides an unchanging signal

constant one value 1.0 one

// wavfile_out module.  a wcnt file without atleast one of these modules is 
// as good as useless.  It has an in_bar_trig aswell as an in_bar input 
// to stop it from thinking every sample in a bar is a new bar. 
// And Why Not? (tm)

wavfile_out
wav1
	in_left		amp1	out_mono
	in_right	amp1	out_mono
	in_bar		time1	out_bar
	in_bar_trig	time1	out_bar_trig
	filename	basics01.wav
	start_bar	0
	end_bar		1
wav1

wcnt-1.1001/jwmsynth
