wcnt sampler module
-------------------

The sampler module is fairly flexible about how you use it.

It has a number of play modes, and loop modes, aswell as a modulatable
start position. Loop points, which are usually fixed positions, can be 
optionally set as offsets from the start point.

Because of this flexibility, in some situations the start position and
play direction may conspire to travel away from the loop points to the
start or end of the sample.  This is where the play modes come in, and
they are only activated when looping is enabled.  PLAY_WRAP will 
continue play in the same direction but from the start or end of file as 
appropriate. PLAY_BOUNCE will change the play direction, and, PLAY_JUMP 
will jump into the loop.  PLAY_JUMP has two modes also, JUMP_PLAY_DIR,
and JUMP_LOOP_DIR.  The first specifies to start the loop with initial play 
direction, before adopting the loop mode, while the latter, starts the loop
using the loop mode.

example1:
---------
                  (loop_mode = LOOP_FWD)
		|              | <-loop-> |     |
		|______________|__________|_____|
			  |
			starting point
			 <- play <-
			 
	options:
		1) stop
		2) bounce - play forward from start
		3) wrap - play backwards from end
		4) jump - jump to loop.
		
	jump options:
		1) play - play loop backwards once before looping forwards
		2) loop - play loop from start of loop
			 
example2
--------
             (loop_mode = LOOP_REV)
		|      | <-loop-> |             |
		|______|__________|_____________|
							 |
						  starting point
						   -> play ->

	options:
		1) stop
		2) bounce - play backwards from end
		3) wrap - play forwards from start
		4) jump - jump to loop
		
	jump options
		1) play - play loop forwards once before looping backwards
		2) loop - start loop from end
		
NOTE:

	jump play will always use the initial play direction, because
	it only gets one chance before getting caught in the loop.


There is not too much checking by the sampler of the loop points the user
gives it.  It checks that loop_start is before loop_end, and swaps them if
not.  If the loop points are fixed, ie loop_is_offset is OFF, then it checks
that they are within the boundary of the wavfile, and corrects them if not.

If the loop points are offsets, then when the time comes it adds them to the
start position, and then checks them, changing if necessary.
