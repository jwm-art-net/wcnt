wcnt/jwmsynth  // <-- that header must be on first line (and last line too)
//------------------------------------------------------------------
// demo1.wc //
//------------------
//
// using modules: riff, sequencer, osc + sinewave, adsr, amp, wavfileout
// this--> // signifies to wcnt to ignore the rest of the line:
//
// comments can be placed anywhere except inbetween a 'command' and it's value. ie 
//
//		riff // **cannot have comment here** riff1
// or
//		in_frequency //**or here**	seq1 //**or here** out_frequency 
// but
// 		riff riff1 // **this is ok**
//------------------------------------
// use whitespace as you wish.
// ie:
//	in_frequency
//		seq1 out_frequency
//-------------------------------------------------------------------
//
// wcnt 'expects' more header info next, in the following order

samplerate 	44100
bpm		160
signature 	4/4

// exit_bar tells the synth when to finish, regardless of anything else
// otherwise it would go on for ever or until it crashed.
// bar 0 is the first bar. stop when exit_bar is reached.
exit_bar 3
// end of header

// all the modules and riff's and wavfilein's can be defined in any order
// but the parts of each module are expected to be defined in specific order ;)

// note length and position translation:
// note_length : <-- whole half quarter eigth sixteenth thirtysecond -->
// length value: <-- 256   128  64      32    16        8 -->
riff 
riff1
// 		name position length velocity
	note c0		0 		16		0.3
	note d0		32		16		0.4
	note e0		64		16		0.5
	note f0		96		16		0.6
	note g0		128		33		0.7 // overlapping notes  prevent out_note_on_trig from being set
	note a0		160		33		0.8 // but cause out_note_slide_trig to be set instead.
	note b0		192		33		0.9 // this tells osc_clock to slide to the new frequency
	note c1		224		33		1.0 // rather than jumping straight to it
riff1

riff 
riff2
	// 	name position length velocity
	note c1		0 		16		0.3
	note b0		32		33		0.4
	note a0		64		16		0.5
	note g0		96		33		0.6
	note f0		128		33		0.7
	note e0		160		16		0.8
	note d0		192		33		0.9
	note c0		224		16		1.0
riff2

sequencer 
seq1
	track 
	//riff name    bar
		riff1 		0
		riff2		1
	track
	velocity_response_time	20	// in some conditions can help prevent nasting popping sounds from
					// sudden changes of velocity ie when velocity is used by amplifier
seq1 


adsr  
adsr1
// adsr is really two adsr's 
// high velocity (1.0) outputs upper adsr
// low velocity (0.0) outputs lower adsr
// any other velocity outputs in-between.
// sustain section is held until note_off
// and it's level is the same as decay level
// it is automatically generated so you don't have to.
//
//			up time(ms)	up level	low time(ms)low level
	envelope
		attack	15.0		1.0			75.0		0.45
		attack	15.0		0.9			35.0		0.80
		decay	50.0		0.9			75.0		0.75
		decay	75.0		0.8			100.0		0.65
		release	55.0		0.25			35.0		0.25
		release	25.0		0.0			15.0		0.0
	envelope
//
// input name		module name	output name
//
	in_note_on_trig		seq1		out_note_on_trig
	in_note_off_trig	seq1 		out_note_off_trig
	in_velocity 		seq1 		out_velocity //negative inverted.
//
// parameters
//
	sustain_state 		on
	zero_retrigger		off
adsr1

osc_clock
osc1
	in_note_on_trig		seq1	out_note_on_trig
	in_note_slide_trig	seq1	out_note_slide_trig
	in_frequency		seq1	out_frequency
	in_freq_mod1		off
	in_freq_mod2		off
	octave_offset	0
	tuning_semitones 0.0
	portamento_time	50.0
	freq_mod1_size	1 	// 1 no change  > 1 amount to increase or decrease frequency by
	freq_mod2_size	1 	// ie 16 will make maximum of frequency * 16 or minimum of frequency / 16
			 	// (trusting in_freq_mod1 range is within -1.0 to + 1.0)
osc1

sine_wave
swave										
	in_phase_trig	osc1	out_phase_trig	// when to begin journey through (360 degrees)
	in_deg_size		osc1	out_deg_size 	// <--deg_size is 360 / (samplerate / frequency)
											// or amount to step through on each sample.
											// whether to stop after one cycle or 
	recycle_mode		off 				// <-- continue till retrigger.
											// whether to _jump_ to zero degrees on 
	on_trig_reset_phase	off 				// <-- trigger - better left off in most cases
	phase_cycles 1.0						// amount of a cycle (360 degrees) to do
swave

lfo_clock
lfo_clock1
in_phase_trig	seq1 out_start_trig
in_freq_mod1	swave out_output
in_freq_mod2	off
freq	10.00
freq_mod1_size	0.50
freq_mod2_size	0.00

// outputs for module: lfo_clock
// out_phase_trig
// out_premod_degsize
// out_deg_size
lfo_clock1

tri_wave
lfo1wave
//inputs for module: tri_wave
in_phase_trig	lfo_clock1	out_phase_trig
in_deg_size	lfo_clock1	out_deg_size
recycle_mode	off
zero_retrigger	off
// outputs for module: tri_wave
// out_output
// out_play_state
lfo1wave

stereo_amp
amp1
									// (mono) signal (within range -1.0 to 1.0 ):
	in_signal	swave	out_output	// to amplify (to range -32767 to 32767):
	in_amp_eg	adsr1	out_output 	// <- amplitude shape signal
	in_amp_mod	seq1	out_velocity	// <- amplitude modulation signal
	in_pan_mod	lfo1wave	out_output	// <- panning modulation signal
	amplitude		20000			// <- -32767 to 32767  (negative inverts)
	amp_mod_size	0.70			// <- ratio module amplitude by in_amp_mod input
	pan		0.00  			// <- -1 left 0 center 1 right
	pan_mod_size	0.99 			// <- -0.999... to 0.999...
	clip_mode		clip			// <- clip or invert_clip - cut or invert excess 
	clip_level		32000			// <- -32767 to 32767 chop off level
	dc_level		0				// <- -32767 to 32767 
									// dc_level: amount to offset amplified signal:
									// note: dc_level is also shaped by in_amp_eg etc
amp1

// have not used a mixer or mixer_channels because only one (stereo)channel to output.
wavfile_out
wav1
	in_left		amp1	out_left  // <- amplified signal (range -32767 to 32767)
	in_right	amp1	out_right // <- amplified signal
	filename	demo1.wav		// <- any valid filename
	write_from_bar	0 // begin on start of 1st bar
	write_to_bar	2 // end on start of 3nd bar 
	// use start_sample	as alternative 
	// use end_sample as alternative
wav1

wcnt/jwmsynth
