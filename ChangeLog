--------------------------------------------------------------
Friday 6th October 2006

FIXES:
    * connector::connect had a cout << null_pointer left
      inside a conditional by accident.

    * removed group_clone data object name from dobjnames.

    * removed unecessary requirement in
      inputedit::create_connectors for the output module to
      exist (ie to have previously been defined prior to the
      definition of the input_editor.)

    * combiner::duplicate. when the combiner was put in a group
      before the wcnt_signals it used, were added to the group,
      when the group was duplicated the combiner could not find
      them but did not check, consequently causing a segfault.
      The checks are now in place, and if --verbose is used
      then a warning is issued. see test_wcs/combinertest.wc.

    * switcher fixed for combiner problem above

    * spreader fixed for combiner problem above

    * mixer fixed for combiner problem above

    * trig_switcher fixed for combiner problem above

--------------------------------------------------------------
Thursday 5th October 2006

CHANGES:
    * added duplication code to combiner module. the combiner
      when duplicated as part of a group, and when the
      wcnt_signals it combines are part of the same group, now
      handles the group process correctly and inserts the
      new groups wcnt_signals into the combiner copy instead of
      the existing groups wcnt_signals. if the combiner is part
      of a group but the wcnt_signals are not, the original
      wcnt_signals are added to the copy.

    * added duplication code, to switcher, spreader, stereo_mixer,
      trig_switcher, etc. code to prevent wcnt_exit from being
      duplicated, and time_map, and timer.

    * that which the user knows as wcnt_exit, has had its source
      and include files, its class name, and associated references
      renamed to reflect its usage, instead of the misleading
      name of wcntmodule.

--------------------------------------------------------------
Wednesday 4th October 2006

FIXES:
    * jwmsynth, taken the calls to synthmod::init out of the
      connection routine and added them to the validate
      routine, they're called once each module has been
      validated.
      
ADDITIONS:
    * adder, adds two signals together. it's taken me how many
      years to come up with?

    * subtracter, another big one, subtracts one signal from
      another.

    * trig_delay, a module to delay a trigger by a specified
      number of milliseconds.

    * simple_delay, the delay module without the trimmings or
      cruftless as some might put it.

--------------------------------------------------------------
Tuesday 3rd October 2006

CHANGES:
    * synthmod base class has several new methods, amongst
      them, a virtual, get_in to pair with set_in. check_inputs
      to check that the inputs are actually set for a module
      (called by jwmsynth during validation) independantly from 
      functioning of the connectionlist and co. some new
      methods for setting and getting group names.
      duplicate_inputs_and_params has been split in two.
      duplicate_module has a new parameter to specify if the
      new module is to be reconnected or not.

    * synthmod derived class have had a minor switch statement
      tidy up in their virtual set and get methods.

    * jwmsynth has new method, jwmsynth::validate_synth,
      which contains the validating code previously contained
      within generate_synth. As input checking is performed
      during the validation, validate_synth should be called
      after connect_synth.

    * condensed main.

    * synthfilereader no longer allows module or data object
      names to be defined which contain a dot, the dot
      signifies a grouped module. the group data object must
      be used to add a module to a group.

    * copier no longer allows a copy to a group type name.

ADDITIONS:
    * group is a new data object which groups together a bunch
      of modules by prepending the name of the group to each of
      the modules usernames. it then proceeds to reform all the
      connections for that modules inputs to the new name.
      the group will be able to be used by the copier to copy
      the group and all its modules to a new group. having
      spent most of the day, and evening, and with what i'd
      done last night, it finally works, the group can be
      copied sucessfully maintaining the input/output
      relationship of the grouped modules.

--------------------------------------------------------------
Monday 2nd October 2006

CHANGES:
    * sine_wave has minor modification so that if both
      recycle_mode and on_trig_reset_phase are both turned off
      the sine_wave no longer ceases output. fixed for the 
      degs > max_degs check to consider in_phase_trig before
      turning the play_state to off, because in_phase_trig 
      sometimes occurrs simultaneously with degs > max_degs.

    * synthmod::duplicate now works the other way around, it
      is no longer down to the derived classes to impliment
      duplication, if they do not allow duplication then they
      must impliment duplicate to prevent it. some modules will
      require their own duplication method to copy their data
      objects anyway, but can still use synthmod::duplicate to
      do the basic stuff (copy inputs and params).

FIXES:
    * linkedlist add_at_head and add_at_tail ignored 
      MULTIREF_OFF, now they don't.

--------------------------------------------------------------
Sunday 1st October 2006

NOTES:
    * I thought everything was going really well, until that is
      I "make examples". drx01.wc causes errors in sampler::run
      which I had catered for with error msgs which I had never
      witnessed in action before. I am seriously perplexed by
      it, I have adapted the sampler code slightly, but nothing
      which should have that effect, which is only with
      drx01.wc. A "diff -u" of wcnt-1.2/src/sampler.cc with
      wcnt-1.25/src/sampler.cc shows that there is nothing
      changed which should have this effect. valgrind reports
      only on while processing drx01.wc, of invalid read sizes,
      and the msgs by the sampler mentioned are of the AC buf 
      pos which is vastly out of range, as is the normal buf_pos.
      I've only changed drx01.wc enough for wcnt-1.25 to process
      it. valgrind is giving me the hump about set_wc_filename
      also, and again I can see absolutely nothing there, the
      char* wc_filename gets [] deleted.

    * I guess that will teach me to make token tweaks in code
      because it's more or less the same as something new I've
      written. Ie, the above problems have occuppied me for
      several hours, namely the sampler. I've put in *lots* of
      messages in sampler to try and track down the origin of
      the problem, but try as I might it was not to be found
      there. Eventually started whittling down the sampler
      definitions in drx01.wc to find it was todo with the
      start position modulation. Or so I thought, then the
      only other difference between sampler1 and sampler2 was
      their in_deg_size inputs, sampler 1 had osc1. Looked at
      osc1, fiddled about, removed _its_ frequency modulation
      and what do you know? Looked at what was modulating osc1
      the switcher module, hmmm, lets remove it's xfade time,
      and what do you know? did a diff betweenn the wcnt-1.2
      and wcnt-1.25 switcher.cc files, and what do you know?
      a silly tiny little tweek one line of code difference
      caused me all this ****. bastard. "If it ain't wrong,
      don't fix it." correctomundo.

CHANGES:
    * wavfilein no longer calls wavfilein::open_wav() in
      wavfilein::validate().

    * sampler now calls wavfilein::open_wav() and emits error
      messages if it failed.

    * updated error messages for param_editor and input_editor
      to be a little more helpfull when param/input setting
      failed.

FIXES:
    * stereo_channel previously used the same pointer variable
      for each input and output, but if the input was not set
      then attempting to get the output would result in an error
      message saying the output did not exist. now they're
      seperated, the output is not a pointer and consequently
      stereo_channel::run() is no longer empty.

    * the infinite loop reared it's ugly head again in
      synthfilereader::read_string_list_param() when a module
      or dataobject was named editlist and the editlist was
      improperly formed. added if statements to prevent modules
      and data object from being named editlist. Should perhaps
      investigate a better method for preventing reserved words
      from being used as names. (there's only two reserved
      names so far, off and editlist.)

    * using the param_editor to edit the filename parameter of
      a wavfilein now has the intended effect.

    * sync_clock frequency modulation needed a division
      replaced with a multiplication.

--------------------------------------------------------------
Saturday 30th September 2006

CHANGES:
    * various DEFS now available to be defined in Makefile to
      show a count of various classes being created, destroyed,
      and the max number of that class type at any one time.
      helps in detecting memory leaks. classes: ll_item, dobj,
      note_data.

FIXES:
    * fixed memory leak in riffdata::edit_notes() which occurred
      when using editnotes to change notes positions.

    * fixed memory leak in sequencer::run() caused by a riff
      starting and overwriting the note pointed at by next_note.
      the note is deleted.

    * fixed segfault which occurred when reading using the 
      synth_file_reader told to exclude reading a wavfilein.
      have prevented data objects which are not to be included
      from being validated.

    * infinite loop is now avoided by 
      synthfilereader::read_string_list_param() which was caused
      by malformed editlists in definitions of input_editor and
      param_editor. added existence checking in set_param
      methods of both to help correct it, along with some minor
      extra logic in read_string_list_param.

BUGS:
    * when using synth_file_reader to read a wavfilein and a 
      sampler from another .wc file, using the param_editor to
      edit the filename parameter of the wavfilein will have
      no effect, you need to create a new wavfilein and edit
      the sampler wavfile parameter.

--------------------------------------------------------------
Friday 29th September 2006

CHANGES:
    * Removed all four FREQ_MOD?_HI and FREQ_MOD?_LO param
      names from paramnames class as they were not in use and
      are redundant.

FIXES:
    * riff_data::edit_notes had its function pointers mixed up
      and consequently was a little confused over what it
      was  supposed to  be doing.

ADDITIONS:
    * stepper module, it was going to be an automated switcher
      module populator, but decided that might be too silly
      and came up with this instead, can't be bothered to say
      much more, I'm going to bed right now.

--------------------------------------------------------------
Thursday 28th September 2006

NOTES:
    * in the duplication code for each specific module type, I
      had been adding a line of code to copy each input, and a
      line of code to copy each parameter. That is, until I
      wondered if I could not make it more automated, and hey
      presto I could. Now I need only to create the module to
      copy the stuff to and with a single call to 
      synthmod::duplicate_inputs_and_params_to(synthmod*) it's
      all done. Ahhh! The beauty of virtual methods!

    * slowly adding duplication code to the synthmodules.
      only one dobj can be duplicated and that is riffdata,
      all the others are either too simple to be worthwhile
      or too complex and impracticable. some synthmodules 
      will also suffer from impracticability, such as the
      switcher, combiner, and mixer which have lists of
      modules inside of them. the most popular modules, such
      as the clock based and waveform based should present no
      serious problems, though other modules such as the adsr,
      userwave, and dynamics contain data objects inside lists
      and these present a problem in that nothing can be done
      about editing them, other than taking the same path as
      note_data, but unless there is a name element within the
      dobj parameter (such as notename) there will be no easy
      way about it.

    * maybe the switcher modules could have an edit command
      which reorganises the order of the modules it switches
      between, that would be ok. a replace command might be
      usefull too.

CHANGES:
    * connectorlist has a new method to create a connectorlist
      containing only the connections for a specific module.

    * synthmod has new virtual method duplicate_mod. any
      synthmod derived classes which do not allow duplication
      should leave it to synthmod to emit an error message. 
      otherwise, make it copy stuff over to the new module.

    * dobj has new virtual method duplicate_dobj. same working
      as synthmod::duplicate_mod

    * note_data has further complexified in a more useful way
      for riff_data. get_note_number now returns 60 for middle
      C (c0 in wcnt, c4 elsewhere). added enum for choosing
      note editing operator types, add, subtract etc. changed
      enum values from the character that symbolises them, to
      an integer number. switch statements determine from
      notename which enum value to return from the
      corresponding methods, taking the onus off riffdata.
      reorganised order of command characters to be more
      sensible.

    * riffdata::edit_notes reorganised, operating in a vaguely
      more sophisticated fashion. (ie an index of function
      pointers accessed by determination of the note_data
      enum values (why did I not think of that earlier?).)

ADDITIONS:
    * copier data object. the copier copies a data object or
      a synthmod. specify from and to as text names.

--------------------------------------------------------------
Wednesday 27th September 2006

wcnt-1.25

CHANGES:
    * note_data has added to it three enum types for various
      note editing commands specified in the note name. three
      coresponding methods for getting the three portions of
      a note editing command. certain note edit commands have
      a notename appended to them, get_note_number and
      get_frequency take this into account.

    * riff_data no longer recognises an asterisk (*) starting
      a note name as a signifier of a note editing command.
      this is because other commands beside delete have been
      added such as - (delete) N (name) P (position) 
      L (length) and V (velocity). These same symbols are used
      (except -) for selecting which notes to operate on.
     

    * riff_node now gracefully handles data objects other than
      riffs passed to it, instead of ignoring them and causing
      a segfault.  removed the start_len and end_len which the
      sequencer used for adjusting note lengths...

    * ...sequencer no longer adjusts note lengths.

ADDITIONS:
    * riff_editor data object edits riffs. it contains a
      parameter for specifying the riff to edit, and then a
      notelist in which notes are inserted exactly the same
      way as they are in a riff. It offers no extended
      functionality over riff_data other than being able to
      operate on already defined riffs (such as those read
      from some other .wc file, or those duplicated in the
      soon to be created duplicate/copy data objects).

--------------------------------------------------------------
Tuesday 26th September 2006

wcnt-1.25

CHANGES:
    * note_data has two new member methods, namely, 
      get_frequency, and get_note_number. the first is and
      shall probably remain redundant since the second was
      introduced as to help the changes in riff_data make more
      sense....and can accept certain note names which are not
      names of notes at all...

    * riff_data has new member method, edit_notes(note_data*).
      when insert_and_position_note comes across a note name
      beginning with a * (asterisk) 
      
--------------------------------------------------------------
Tuesday 26th September 2006

wcnt-1.25

FIXES:
    * fixed linked list ordered insert template-function so
      that the correct return type (ie the list items data) is
      returned when inserting between two existing items.

ADDITIONS:
    * peak_detector module. this module outputs a user 
      specified message to stdout when the input signal falls
      outside a specified range. it can do this as many times
      as you like, or, unlimited times. it can also abort wcnt
      processing if you want it too.

CHANGES:
    * riff_node has two new parameters (riff_nodes are inside
      the sequencer module). they are repeat, to repeat the
      riff n times, and repeat_stripe, so the repetition is
      every n bars. (insert the riff, and then repeat it n
      times.)

    * sequencer::add_riff_node has been adapted to handle the
      riff_node changes. a by product of this is that
      riff_nodes are deleted when a new riff_node is inserted
      at the same bar position, instead of emmitting an error
      message and wcnt quitting out, allowing the  user to
      repeat riffs and then break up the repetition by adding
      further riffs.

    * riff_data::insert_and_position_note now deletes any
      notes in the same position as the new note to be
      inserted, as it should have done in the past.

--------------------------------------------------------------
Tuesday 28th June 2005

wcnt-1.2

FIXES:
    * Fixed warning by valgrind of conditional jump using
      unitialised member variable within serialwavfileout
      destructor.

    * Fixed memory leak occurring in command line help for
      data objects.

--------------------------------------------------------------
Monday 27th June 2005

wcnt-1.2

FIXES:
    * Fixed memory leak occurring in sequencer by getting 
      ~sequencer() to check if next_note had been added to its
      play_list. If next_note was not in play_list then delete
      it aswell.

PROBLEMS:
    * seems to be a memory leak with synthfilereader's
      set_wc_filename() method, can't understand it yet.

--------------------------------------------------------------
Sunday 26th June 2005

wcnt-1.2

CHANGES:
    * wait_trig has a new output - out_wait_state. The module 
      code was forthright about it becoming an output - as if I
      needed much persuasion.

    * trigger module has been simplified to output out_trig when
      the signal rises above trigger_level and out_not_trig when
      it falls back down again.

ADDITIONS:
    * on_off_trig has a modified version of the old trigger
      module's workings. removed independant parameter. added
      check_levels parameter.

--------------------------------------------------------------
Friday 24th June 2005

wcnt-1.2

CHANGES:
    * wait_trig has had a code revision.  It definately waits for
      its second input trigger before sending the first input
      trigger to output. A new parameter named count specifies
      how many times to let the first input trigger before
      waiting for the second again. The wait times are now timed
      from the last trigger output.

--------------------------------------------------------------
Wednesday 22nd June 2005

wcnt-1.2

CHANGES:
    * when using synth_file_reader data object and it's reading a
      definition of something, the parameters are now not set
      when that something is not being included. also, any data
      objects contained in a list within a something not to be
      included, are deleted instead of inserted. removed traces
      of name_extension from synthfilereader class in anticipation
      of a duplicator data object which would be better suited.

    * sync_clock2 module has become the sync_clock module, the
      original did not have modulation and the sync_clock2 has
      been tested sufficiently to replace it.

ADDITIONS:
    * wcnt_trigger module similiar to wcnt_signal in that its
      only use is for adding into trig_switcher module.

    * trig_switcher module.  contains a list of wcnt_trigger
      modules. has a single input, in_trig which tells it to
      output the next trigger in the list.
--------------------------------------------------------------
Thursday 16th June 2005

wcnt-1.2

CHANGES:
    * switcher module now initialises member variable zero to 0.0

UNFIXED PROBLEMS:
    * some parameters in a module or data object which require
      a module or data object to exist when the parameter is set,
      and neither is included by the synthfilereader, cause problems
      because the synthfilereader creates the object and sets the
      parameters in order to read the file.  set_param cannot find
      the module or data object so wcnt aborts despite there being
      nothing wrong.  example being a mixer module that is not to
      be included along with mix_chan modules that have not been
      included.

--------------------------------------------------------------
Monday 13th June 2005

wcnt-1.2

CHANGES:

    * synthfilereader has been altered slightly so that it can handle
      reading parameter types in which only the parameter value is
      specified - the parameter name is ommitted.  these types can
      only be used by an EDIT dobj within an EDITLIST.  In order for
      this to work a new member variable is used called command which
      is a pointer to a std::string.  when pointing to a string,
      synthfilereader::read_command() returns the string pointed to
      by command instead of reading a string from the file (it then
      deletes command and sets it to null). read_dobj_params(dobj*)
      now also requires an extra arguement which should be a char*
      pointing to the dobj list termination string (ie "editlist").
      finally there is a new private member method called
      read_string_list_param which accepts two const char* which
      point to two strings. if either is encountered it is given as
      command for read_command and the string list is complete.

    * inputedit class now uses the new unnamed parameter string types,
      one is the module name, and the second is a string list which
      contains an input name, module name, and an output name. it may
      contain more than one group of these. a single inputedit can
      only change the input settings of one module (but more than one
      input), the inputeditor contains an inputedit for each module
      to edit. (unless the user in their .wc file creates an edit for
      each parameter in a module.)

    * paramedit class is now using the short form like inputedit. and
      both are working.

--------------------------------------------------------------
Sunday 12th June 2005

wcnt-1.2

CHANGES:

    * synthfilereader is now functioning as intended.  name_ext
      for modules and data objects requires more consideration
      on how to accomplish it and has been postponed.

ADDITIONS:
    * param_editor.  you can now edit the parameters of modules
      and the top-level parameters of data objects (not parameters
      of encapsulated data objects).
    * input_editor.  inputs of modules can also be edited. It removes
      any connectors for the specific module input and then adds the
      new one to the connectorlist.

NOTES:
    * working on new implimentation of param_editor and input_editor
      as currently it is so long-winded that it defeats the object of
      using it. it is simply shorter to exclude a module from an
      included file and then re-create it in the main file. this is
      because it is all dobj based with param names etc so that setting
      osc1 freq 440 with parameditor currently is done thus:

      param_editor
      par1
          editlist
              edit
              name  osc1
                  param freq
                  value 440
              edit
                  name  osc1
                  param freq_mod1_size
                  value 2.0
          editlist
      par1

      the new implimentation of dobj classes paramedit and inputedit
      have two string type parameters.  the first is the module name,
      and the second is a string containing a list of paramter names
      and their values for paramedit, and a list of input names and
      output module names and output names for inputedit.

      thus the above example becomes:

      param_editor
      par1
          editlist
              edit osc1
                  freq           440
                  freq_mod1_size 2.0
          editlist
      par1

      "osc1" becomes the first string, and the second string contains
      everything after it before editlist, or if there is another edit
      everything up to that.

      in order to achieve this, the  'edit' dobj will require different
      handling by synthfilereader (class). normally osc1 would be next
      to a parameter name but here no parameter name is mentioned, and
      the same for the string list parameter (which contains the list of
      param names and their values). the string list itself requires a
      different handling as parameters cannot normally read a string
      which contain spaces.

--------------------------------------------------------------
Monday 6th June 2005

wcnt-1.2

CHANGES:
    * new class - topdobjlist.
      used as a replacement for dobjdobjlist for synthfilereader
      (and jwmsynth cmdline help) to get structure for standalone
      data objects. topdobjlist is infact a list of dobjdobjlists.
      allows more flexability.

    * dobj::dobjdobjlist stuff replaced with dobj::topdobjlist

    * moddobj has been altered so instead of having a 
      dobjnames::DOBJ_TYPE to store the data object list type
      contained in a module, it now has a dobjdobjlist - allowing
      greater flexability.

    * moddobjlist simplified because of moddobj modifications.

--------------------------------------------------------------
Sunday 5th June 2005

wcnt-1.2

CHANGES:
    * still debugging synthfilereader. it's full of cout << to
      help in the process which will be removed later.  but it
      can include a file and works. removed name_ext parameter
      from param list as I've not figured out how best to work
      it. (problem: certain param types get shirty about the
      name passed to it when the corresponding module or data
      object cannot be found)

    * created namespace iocatconv, within which are two
      functions which replace the two functions formerly part
      of synthfilereader.  this enables converting strings
      to data types corresponding with iocat types, without
      having to read the string from a file.  (for reasons to
      do with parameter editing - not yet implimentated).

    * constant modules are now unlinked from the main
      synthmodlist before the synth is run.

    * two new dobjs
      dobjnamedobj holds the name of a dobj, and modnamedobj to 
      hold the name of a module.

--------------------------------------------------------------
Friday 3rd June 2005 (3am Saturday morning)

wcnt-1.2

CHANGES:
    * completed migration of file reading from jwmsynth to
      synthfilereader so it can still read a .wc file. converted
      synthfilereader to inherit dobj as a base class. need to
      complete dobj stuff so user can define a .wc file to
      include in another. this means adding code to add a name
      extension to names of modules and data objects in the
      include file, complete coding of parameters, and lists
      of names to include/exclude, and then...

   * just realised I need to create two dobj based classes to
     add to the lists in synthfilereader. both consist of a
     single parameter, nothing else. that parameter being a
     string, the name of a module, or a dobj. This poses a
     serious problem, a dobj based class to hold the name of
     a dobj - should be called what?!?!

--------------------------------------------------------------
Thursday 2nd June 2005

wcnt-1.2

CHANGES:
    * created classes to handle fixed string type parameters ie
      logic_func can be set to 'or', 'and', 'xor' etc.
    * removed several iocat types which will be handled by 
      CAT_FIX_STR. removed code from synthfilereader which 
      handled the old iocat types and replaced with code to
      handle fixed string types.
    * amended adsr_coord, sampler, logic_trigger, modifier, to
      use the new CAT_FIX_STR types, easy.

--------------------------------------------------------------
Wednesday 1st June 2005

wcnt-1.2

Begun development of wcnt-1.2.  In wcnt-1.2 the synthfilereader
and jwmsynth classes are having a mass overhaul, especially
synthfilereader.  This is geared toward wcnt being capable of
reading multiple wcnt files by way of a data object which
specifies a file along with lists of modules and data objects
to either include or exclude.

This new data object (dobj based class) will eventually be all
that remains of synthfilereader.  Everything at the current
stage is still intact and working.

CHANGES:
    * standalone data objects (dobj) can now contain more than
      one list.

    * all dobj param names (formerly dparnames) have been moved
      into the paramnames class.

--------------------------------------------------------------
Saturday 28 May 2005

wcnt-1.128

CHANGES:
    * sequencer slide algorythm logic adjusted so it works
      properly.

--------------------------------------------------------------
Thursday May 26 2005

wcnt-1.128

CHANGES:
    * sequencer. completed initial coding of new note slide
      handling.  New member methods to lesson code duplication
      in run().  Testing and debugging to follow... Ha! After
      a handful of simple bugs it sequences - almost properly!
      Some problem with note_off and notes which don't overlap.
      Slides when it should n't. Have removed winner of the
      pointless parameter prize - hold_notename.

--------------------------------------------------------------
Wednesday May 25 2005

wcnt-1.128

BUGS:
    * time_map, sequencer, and sync_clock modules have a problem.
      Sample accurate synchronisation only occurrs during, and
      after ramped tempo changes.  Otherwise the sequencer note_on
      triggers a sample after the sync_clock phase_trig, which is
      useless for using with the logic_trigger.

CHANGES:
    * logic_trigger has a new parameter - precision. This specifies
      the number of samples to allow for drift of triggers due to
      above bugs. So if the triggers drift out of sync with each
      other by 1 sample (as they do) then setting precision to 1
      will treat them as if they both occurred simultaneously.
      I'll probably keep this even if the drift problem gets fixed
      as it could have some 'creative' application.

    * sequencer, begun work on enhanced note slide handling. (that
      is, enhanced in comparison with current handleage.) it's all
      worked out up here (taps head). just a matter of trudging 
      through the run() code.

--------------------------------------------------------------
Monday May 23 2005

wcnt-1.128

CHANGES:
    * adsr module has three new parameters. min_time which is
      the minimum time before the release section can be
      activated regardless of note_off occurring beforehand.
      max_sustain_time which is exactly that. release_is_ratio
      which says the release section levels should be taken
      to be ratios of instead of absolute levels.  Rearranged
      code in adsr::run() method and added new private method
      to unclutter adsr::run().

    * Added in_phase_trig input to sync_clock so that it's phase
      can be reset.
    
--------------------------------------------------------------
Monday May 23 2005

wcnt-1.128

ADDITIONS:
    * sync_clock module. A clock module which keeps in time
      with the tempo from the time_map module (via inputs). The
      frequency it oscilates at is specified as a note length,
      and thus a quarter value parameter is also required.

    * XORNOT logic function in logic_trigger module. Similiar to
      XOR function in that it does not output a trigger if both
      trig1 and trig2 trigger, but unlike XOR, it only triggers
      if trig1 alone triggers - a lone trig2 is ignored.

CHANGES:
    * Altered member variables in time_map and sequencer modules
      from unsigned long to double for better time keeping.

    * added in_play_state input, and response_time parameter, 
      to osc_clock. Normal note changes when in_play_state
      provides OFF are instantaneous.  While in_play_state is
      ON, frequency changes take response_time ms to result.
      Basically works by same mechanism as note_slide_trig but
      with subtly different usage.

BUGS:
    * Moved incrementation of bar position code in sequencer so
      it no longer skips some samples.  Discovered while testing
      sync_clock module alongside sequencer module that they were
      not precisely synchronized as they should be, but now are.
      (edit: errrr, not quite, see Wed25May)

    * Sequencer no longer provides out_end_trig when asked for
      out_start_trig!

    * Fixed bug in adsr module which caused the release section
      to start over again when note off was triggered more than 
      once in a row without a note on trigger.

--------------------------------------------------------------
Sunday May 22 2005

wcnt-1.128

CHANGES:
    * time_map. Tempo changes are no longer absolute. ie a tempo
      change of 10 will add 10 bpm to the tempo, instead of setting
      tempo to 10 bpm.

--------------------------------------------------------------
Sunday April 24 2005

wcnt-1.127

ADDITIONS:
    * timer module.  Add a list of times for it to output a
      trigger at those times, as well as output a count of
      how many times it has done so.  first trigger is count 0,
      second trigger is count 1.

--------------------------------------------------------------
Wednesday April 20 2005

wcnt-1.127

CHANGES:
    * updated more error messages.

BUGS:
    * no more segmentation faults when a data object terminator
      differs from it's user name.

--------------------------------------------------------------
Tuesday April 19 2005

wcnt-1.127

CHANGES:
    * finally properly implimented dual frequency modulation
      in the osc_clock and lfo_clock modules.  First modulation
      input modulates the original frequency (deg_size actually)
      The second modulation input modulates the result of the
      first.

    * added new methods to dobj, dobjparam, and dobjparamlist
      to impliment range checking as described on Sun April 17.

ADDITIONS:
    * invert module, to invert the sign of a signal

--------------------------------------------------------------
Sunday April 17 2005

wcnt-1.127

CHANGES:
    * new class, stockerrs.  just a simple class with an enum
      and some stock error messages.

    * added new virtual method to synthmods:
      void const* get_param(paramnames::PAR_TYPE)

    * added new method to modparamlist:
        validate(synthmod* sm, 
                 paramnames::PAR_TYPE pt, 
                 stockerrs::ERR_TYPE et)

    * added new method to modparam:
            validate(synthmod* sm, stockerrs::ERR_TYPE et)
      which surprise surprise calls get_param() in synthmod. And
      then checks the parameter is in range.  Can only be used
      for validating numerical values.

    * updated all synthmod::validate() methods to make use of
      new modparam validation, where appropriate.

    * updated error messages in jwmsynth and synthfilereader to
      make sense with this.

--------------------------------------------------------------
Friday April 15 2005

wcnt-1.127

BUGS:
    * Used valgrind memory checker to discover even more memory 
      leaks and also mismatched new [] and delete. (delete w/o []).

    * Fixed a seriously irritating bug which caused meter changes
      to be always added at bar 0.

CHANGES:
    * wavfileheader class now has methods to check that the wav
      identifiers for format etc are readable by wcnt. Previously
      only returned the identifiers as char*'s, which not only then
      had to be compared, but also deleted. Now returns true if 
      readable, and false if not.

--------------------------------------------------------------
Thursday April 14 2005

wcnt-1.127

GENERAL:

    * Removed much unnecessary usage of std::string class, ie
      usernames etc are now char*'s.  ??_names are now pointers
      to the literal text strings rather than a string initialised
      with the literal text string. 

BUGS:

    * Used ccmalloc memory profiler to trace memory leaks, which
      was the initial inspiration for usage of char* instead of
      string.  Removed numerous (understatement) memory leaks from
      all over the shop.

--------------------------------------------------------------
Monday April 11 2005

wcnt-1.127

GENERAL:

    * reformatted command line help

    * Tidied code up, max line length of 74 chars, and tabs
      replaced with four spaces.

    ** removed autoconf, ./configure scripts and replaced **
    ** with a much simpler/smaller Makfile                **

    * recreated Changelog entries, and README, TODO, and 
      INSTALL files after accidently deleting them.

BUGS:

    *** C++ class destructors for the synth and thus its        ***
    *** modules are now called (as they should) to destroy them.***
    *** Fixed three bugs which caused seg faults when doing so. ***

    * fixed bug in sampler module which caused a seg fault
      when the wavfilein object could not open the wav file.

    * fixed bug which caused a seg fault when attempting to
      create a stand alone data object after creating one of
      the synth modules which uses the synth module data
      object wrapper.  (ie creating a wavfilein after a switcher 
      containing a list of wcnt_signal modules)

CHANGES:

    * sequencer module now has all its trigger and state
      outputs working.

    * validation code that was previously not being used
      is now in use.

    * relative paths specified in a .wc wcnt file are now
      relative to the path of the .wc file itself.


ADDITIONS:

    * wait_trig 
        two trigger inputs and minimum and maximum wait
        times.  the output trigger is triggered by the
        first input trigger, but only once the second
        input triggers.  The minimum wait time is from
        the point of last output trigger, and disallows
        successive output triggers.  The maximum wait
        time once elapsed, allows for the output to be
        triggered before the 2nd input triggers.

    * pattern_trig
        a single input trigger and a string pattern
        determine if the output triggers.  The pattern
        consists of 1's and 0's. a 1 means let the
        trigger through, and 0 means don't. The hyphen
        symbol can be added to the pattern as a seperator
        for readability purposes.

    * state_trig
        if the input state is ON, then allow the input
        trigger to output, otherwise dont.  the only
        module to so far make any use of the ??_state
        outputs.

--------------------------------------------------------------
Monday May 17 2004

wcnt-1.1za

Made changes so wcnt will compile with gcc-3.2 without errors.
Removed -wtraditional warning message.

--------------------------------------------------------------
Monday April 05 2004

wcnt-1.1z

Ooops, I keep forgetting to update this file as I go, and may have 
forgotten some of the changes made.

CHANGES:
    * dynamic
        Now has a parameter so that the specified output 
        levels can be used as ratios instead.

    * trigger
        Now has two output triggers with level and time settings
        so it can generate note_on and note_off type stuff.

    * logic_trigger
        Modified the XOR mode algorithm to output a trigger
        if either but not both inputs trigger.  (This may have
        been the case previously but I'd not tested it and
        it's now clearer code.)

    * wcnt_signal
        Now has a level parameter.  Useful when inserting into
        a combiner module etc.

    * sequencer
        Has a new output out_transpose to let other modules
        such as the note_tran know how many semitones a note
        has been transposed by.  Transpose riffs at insertion
        and modify note lengths over riff duration.

    * user_wave
        Made a few minor modifications so that if you define an
        'inverted' waveform (ie |\/| not /\) then it generates
        properly in all circumstances.

ADDITIONS:

    * spreader
        Spreads the output of a number of wcnt_signal modules
        along an imaginary line and outputs that which the
        modulation input lands upon.

    * note_tran
        Translates notes into values.  The note range used
        depends on being triggered by a note_on, or note_slide.
        Four output triggers so you can tell if the note was
        in one of the two note ranges or not.

    * command line options
        There are now short versions of every option. Plus two
        new options for converting a note name to a frequency,
        and a frequency to a deg size and samples per cycle.
        (Sample rate must be provided for latter option.)

--------------------------------------------------------------
Monday March 22 2004

wcnt-1.1z

I've not got round to updating this file for a while and can't remember 
precisely what changes have been made.  I've kind of lost steam as far as
programming is concerned for this year, and will probably give it a break
until Winter draws up again around December or something.

CHANGES:

    * synthfilereader/jwmsynth/dobj classes (etc)
        Created method to read data such as that contained in
        riffs, adsr's, etc to be generic similiar to
        inputs/outputs and parameters.

    * adsr
        added lo_thresh, and up_thresh parameters which dictate
        what values of the in_velocity input will decide which of
        the the lower and upper envelopes, or a mid point envelope
        to be output.

    * conversions
        tidied up conversions.h, and conversions.cc files for 
        converting notenames, to frequencies, to samples, to step
        size to etc.

ADDITIONS:

    * dynamic
        This module maps amplitudes of a signal to different 
        amplitudes.  User inserts a list of points referenced by
        input amplitude, with two possible output amplitudes. The
        modulation input chooses which of the two output
        amplitudes to use, but more than likely it will be
        somewhere between the two.  Also has lo_thresh, and
        up_thresh parameters for dictating the range of the upper
        and lower envelopes regarding the modulation input.

--------------------------------------------------------------
Saturday February 21 2004

wcnt-1.1001 progress

It was probably Monday this week that I begun work on creating a base
class for non module objects and data.  The idea being that it would make
the creation of the next bunch of modules I've got planned a bit smoother.
These modules will use lots of variable length lists of data which would
have meant adding even more specialised routines in synthfilereader to
read and create them.  The existing methods for modules to access data
objects are only really suited for a couple of different object types.

Having many types would lead to a lot of duplication of long winded code.
While the implimentation of this new base class is turning out to be an
equally big pain, it should pay off by making the integration of new data
objects simpler.  I've more or less completed the first stage of designing
the base object and now have got to find where to begin the next to
actually use the information to make things happen. Needless to say until
this is complete, the creation of modules to map samples to notes, note
variation and note remapping will have to wait.  In the meantime, heres
what I've done since the last entry.

CHANGES:
    * lp_filter/lp_filter
        Removed resonance parameters and code.  It was basically sine
        wave generation running at cutoff frequency.  Added a wet/dry
        setting which lets through the original signal as it arrives, 
        (ie it will be out of phase with filtered signal.)  Added 
        out_wet_output which only contains filtered signal.  This can
        be fed to the new input, in_feedback.  The feedback level can
        be modulated by a controlling signal (ie by an adsr or sine_wave 
        output etc.)

    * various
        a few small changes to several modules making minor improvements 
        to the sensibilities of their workings.

    * stereo_amp
        Ha! It now amplifies two signals, one for left, one for right.
        No kidding.  It also has two amplitude levels, one for left, 
        and one for right.  Amazing stuff.  Completely removed pan,
        and pan modulation.

ADDITIONS:
    * mono_amp
        Whuh, where've I been?  Say no more.

    * dc_filter
        the latest addition, arose after seeing some dc filtering code
        examples which I did not really understand, from musicdsp.org.
        The filter works from a time specified in milliseconds to do
        the filtering, rather than specification of a frequency.  It 
        seemed a brainwave at the time, but now I'm wondering how much
        different it really is from a high pass filter?  It works ok 
        though, but sometimes removes too much punch from a signal.

    * pan/panner
        the class is called pan, the user calls it panner.  It does a
        better job of panning than what the stereo_amp used to.  (ie
        signal levels are checked so that it does not attempt to break
        the laws of reality. ie not pan further left than full left.)

    * delay
        a basic delay module.  not tested it enough yet.  The input
        signal can have its level adjusted and/or modulated.  There
        is also a wet/dry setting

    * echo
        exactly the same as the delay, but with a out_wet_output and
        an in_feedback input.  The feedback level of course can be
        adjusted and/or modulated.  One slight problem which causes
        wcnt to abort when delay times are set above 500 ms, but it
        has run with delay times over 1100 ms.  Not looked into a 
        solution yet.

    * multiplier
        very straight forward, multiplies two signals.

    * range_limit
        specify the lowest, and highest values to output of the input
        signal.  clips the signal outside this range.

    * rms
        outputs root mean square of input signal.  gets very slow for
        values over 10 ms.  Made in anticipation of compressor, limiter
        and expander modules.

--------------------------------------------------------------
Monday January 26 2004

wcnt-1.1001 progress

Mainly been grappling with the sampler's anti clip code etc for the past 
week or so.  Unfortunately for wcnt, I've started working (temping) so
it's not progressing at the rate I wish.  Nevermind.  I've also been
getting some ideas together for variation/mapping of various things.  Once
I've hooked all the new modules and changes into the wcnt file reader etc
I'll start working on that.  First notename mapping different ranges with
added bonus of variation also, due to overlapping ranges and random stuff.
Then it's onto the new sampler which uses inputs instead of params for
most of the stuff in the current sampler, and sample mapping to note name
etc.  Problematic about how I'll set that up though. (ie sampledata output
to input or individual inputs and outputs?)

CHANGES:
    * Sampler
        Changed anti_clip samples to samples within input file rather than
        number of output samples.  Added anti_clip_each_end (ON/OFF) to
        allow anti clipping at the start and end of the wav, but this
        means playback starts later and ends sooner.  Added stop trig to
        stop sample playback dead - generally intended for use with 
        adsr off_trig to prevent anti_clipping at the beginning of sample 
        playback when it would not be needed.  Anti clipping now works
        fully without any messages saying it's been activated while
        already active ie it now 'remembers' what it was doing and mixes
        it with what it will be doing.  Because anti clipping has been
        changed to noof samples within input file it ramps the deg_size
        (taken from before it was activated) to the (new) deg_size -
        otherwise it is too sudden.  Was going to add a function to search
        within a range either side of a given point for sample closest to 
        zero, but have put that off 'till later.  Almost forgot ;) when
        playback initially travels away from the loop and reaches the
        start or end of the wav, you can tell it to wrap to the other end,
        bounce to change direction, or jump to jump straight to the loop. 
        With jump you can tell it to play in the initial play direction,
        before it resorts to the loop mode, or to just play as loop_mode
        intends.  Finally, added bi-directional offset for when playback
        changes direction, it will jump n samples in the input file before
        changing direction - to prevent mirroring of a phase in the
        waveform.

    * ADSR
        Added off_trig - mainly to tell sampler to stop playing when the
        adsr has finished.

    * stereo_amp
        Removed the clip_mode as it was crap!  It still clips to the 
        clip level you set, but it does not do invert_clip anymore which
        was intended for doing what the contraster module does better, but
        I'd not bothered to complete it fully.

--------------------------------------------------------------
Thursday January 15 2004

wcnt-1.1001 progress

CHANGES:
    * Sampler
        Now has reverse playback capabilities and bi-directional looping.
        And, the loop positions can be set as offsets from the start 
        position, for when the start position is being modulated.
        I've still got to sort out the anti-clipping code.

--------------------------------------------------------------
Tuesday January 13 2004

wcnt-1.1001 progress

NOTES:
    * BARE_MODULES
        this define is still in place in the src/Makefile.am. It prevents
        compilation of all the user file reading stuff and lists of
        outputs inputs, params, fleas, and cabbages.  Speeds compilation
        up no end. Unfortunately I'm going to have to update lots of
        things when I remove it. uhhhhhhhrrrrrgghh.  When it is defined
        wcnt runs a hard coded setup which uses all the new modules and
        changes - in a teste kind of way.

    * hmmmm
        just looked down the page to the bit about changing bpm in a
        header file.  not so useful anymore....but not completely
        redundant. timemap uses it to create an initial bpm/tempo change
        at bar 0.

CHANGES:
    * timemap
        timemap replaces bpmmap module.  timemap handles not only bpm
        changes, but also timesignature changes.  Thanks to some 
        clarifications from Tim Goetze on the LAD mailing list for
        getting me on my way with it.  

    * note_data, sequencer, timemap
        user specifies note position and lengths using a 1/4 = 12.
        this unlike previously 1/4 = 64 allows triplets.  Floating
        point may be used by the user.  However, timemap, and sequencer
        calculate things using 1/4 = 768, so note_data is converted by
        sequencer into an integer, to keep the checks simple.

    * osc_clock
        Now, I have actually fixed it this time, so it triggers on very 
        first sample, so that the any waveforms using it will start 
        immediately rather than 360 degrees (x samples) later.

ADDITIONS:
    * serialwavfileout
        within a given region specified by start and end bars, whenever
        the write_trig is ON a new wavfile is written out.  Optionally
        specify stop_trig.  naming is basenamennnn.wav where nnnn is a
        number with leading zeros (no way could i not have those zeros).
        Any trigger can be used, most notably note_on or something.
        I just noticed the last wav the test creates is empty apart
        from the header -- oops.

    * contraster
        inspired by the contrast within SND, i created this module.
        because I did not think properly, it has got a rude mode which
        does it the wrong way.  Which of course can be switched by a
        trigger.  Also wet/dry amount.  It does not do it quite as 
        smoothly as SND, but that can probably be fixed with an LPF.

--------------------------------------------------------------
Friday January 9 2004

wcnt-1.1001 progress

This is latest version since 1.0001c.  I've been working on it for 
a week or two now, having given coding on wcnt a break since last
March.  Most of the past two weeks have been spent getting to know
my way around the wcnt source code again.  After putting wcnt-1.001c 
on sourceforge I intended to code the changes I'm starting on now, 
but realised I totally needed to give it a break!  So much so it put
me off using wcnt at all, until about a month ago.

This is what's happened so far:

NOTES:
    * Time signature still does not work.  
        You're stuck with 4/4 time for the moment.  I'll admit that I 
        never even tested it until now.  I looked for info on the net 
        about time signatures, but it still does not seem clear how to 
        implement it.  I looked in cubase and experimented with bars 
        of half notes at different time signatures but it still did 
        not seem to yield any sense there either.  I'm looking for a
        way which will encompass all possible time signatures.  If you
        can give any pointers please please please! N/A don't. I've had 
        some since.

CHANGES:
    * Header information can be in a seperate file to the wcnt file
        being processed.  This means you only need to update one
        file to change the bpm/samplerate of many.  Useful for when 
        working on a composition or library of sounds etc.

    * wavfilein definition updated
        You now specify a name for the wavfilein aswell as the sample 
        path and name,  ie it no longer takes the path and name of the
        sample, for the wavfilein name.  This makes more sense when you
        tell the sampler which wavfilein to use, ie it no longer looks 
        like you're giving it the actual path+filename of the sample.

    * sequencer module
        I've completely removed the code for calculating the sample
        positions of note ON and note OFF, and replaced it with code
        which uses outputs from the new bpmmap module instead.  This 
        has yielded improvements.  It no longer turns off a note in a 
        riff that is still playing just because a new riff has started.

ADDITIONS:

    * bpmmap module.
        Hoorah for tempo changes!  I decided not to go overboad so you
        can only specify a change of tempo at bar n, but you can ramp
        the tempo between 1 or more bars, or just change it immediately.

--------------------------------------------------------------
Tuesday March 25 2003

wcnt-1.0001c

CORRECTIONS:
    * err no I have n't completely fixed the unexpected end of file
        errors some playback programs emmit.  Shorter files seem ok.

CHANGES:
    * in verbose mode, no more mystery as to what the parameter
        has been set to.

ADDITIONS:

    * new command line option --sample-info samplename.wav
        surprisingly, displays .wav header information:
        samplelength, channels, bitrate. command line options
        are parsed in jwmsynth::scan_cl_options.  Useful to
        know how many samples when setting certain sampler 
        parameters

    * wav header checking is now in place, no longer can you read
        as a sample, any old file you throw at it. 
        Boooo! Down with fascists!

--------------------------------------------------------------
Monday March 24 2003 (several hours later....)

Ok.Ok. I've done it again!  I've released the supposedly
fixed version wcnt-1.0001 without testing it fully. DOH!!

wcnt-1.0001b

FIXES:

    * logic_trigger module:
        now you can specify in_trig2 without it telling
        you it expected in_trig1 (changed second "in_trig1"
        to "in_trig2" inputnames.cc line 43)

        no longer reports something about combiner function
        being an invalid parameter type (added missing break 
        statement after line 676 in synthfilereader.cc)

No, I'm not a proffesional.  Yes, this is the first time I've
released software to the outside world.

--------------------------------------------------------------
Monday March 24 2003

wcnt-1.0001

FIXES:

    * registered input in_pwm for square_wave properly.
    * registered in_signal input for modifier
    * lpfilter had the wrong parameters registerd
    * osc_clock freq_mod2 now works

    * velocity response time in sequencer
        velocity response times of 0 don't cause velocity 
        to always be 0 anymore.

    * Appear to have corrected unexpected end of file warnings
        which certain playback programs emit.

CHANGES:

    * the various clock modules trigger immediately on 
        starting the first cycle rather than at the end 
        of the first cycle.

    * improved frequency modulation code for various clock 
        modules. Now a positive value of 1.0 from input 
        multiplies freq by modsize, and negative value of -1.0
        divides freq by modsize.

    * as a result of above, changed osc_clock frequency 
        modulation parameters

    * improved user_wave run() code (possibly)

    * improved stereo_amp amplitude modulation code to work as 
        expected. (rather than being slightly unfathomable as to 
        what it actually does.)

ADDITIONS:

    * added new output out_deg_size to freq_generator

NEW MODULES:

    * random_trigger
        if in_trig is on, randomly choose whether to set out_trig to on
        if choice is against randomly choose whether to set out_not_trig
        to on.  Two parameters: probability and not_probability. 0 ~ 1

    * logic_trigger
        and/or/xor functions, take two triggers and decide to set 
        out_trig to on or off.

    * wcnt_signal
        wrapper for CAT_DOUBLE. NOT CAT_SHORT like mix_chan

    * switcher
        switches through a unlimited list of wcnt_signals, on trigger 
        switch to next.

    * hp_filter
        high pass filter, exactly the same as the lp_filter except it 
        has an extra array to store the original values before doing 
        the low pass thing and then subtracts the low pass from the 
        original.

    * combiner
        similiar to mixer except uses wcnt_signal not mix_chan.  No 
        master level, but has mean_total instead, when set to on
        calculates mean average.
--------------------------------------------------------------
END
