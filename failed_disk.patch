Only in .: failed_disk.patch
diff -x wcnt -x '*.o' -x '*.wav' -x .git -x errocid.wc -ur ./include/cmdline.h /home/sirrom/Projects/wcnt/include/cmdline.h
--- ./include/cmdline.h	2013-10-19 15:18:31.000000000 +0100
+++ /home/sirrom/Projects/wcnt/include/cmdline.h	2013-10-18 17:18:19.000000000 +0100
@@ -112,8 +112,8 @@
     void help();
     void about();
 
-    void dobj_help(synthmod::TYPE);
-    void dobj_help_params(dobj::TYPE, int level);
+    void dobj_help(dobj::TYPE parent, dobj::TYPE child, int indent_level);
+    void dobj_help_items(dobj::TYPE, int indent_level);
 };
 
 #endif
diff -x wcnt -x '*.o' -x '*.wav' -x .git -x errocid.wc -ur ./include/dobjlist.h /home/sirrom/Projects/wcnt/include/dobjlist.h
--- ./include/dobjlist.h	2013-10-19 15:18:31.000000000 +0100
+++ /home/sirrom/Projects/wcnt/include/dobjlist.h	2013-10-18 16:26:06.000000000 +0100
@@ -20,7 +20,7 @@
     }
 
     // create_dobj does not add to list.
-    dobj::base* create_dobj(dobj::TYPE);
+    static dobj::base* create_dobj(dobj::TYPE);
 
     dobj::base* get_dobj_by_name(const char* n) {
         return find_in_data(sneak_first(), name(n))->get_data();
diff -x wcnt -x '*.o' -x '*.wav' -x .git -x errocid.wc -ur ./include/dobjnames.h /home/sirrom/Projects/wcnt/include/dobjnames.h
--- ./include/dobjnames.h	2013-10-19 15:18:31.000000000 +0100
+++ /home/sirrom/Projects/wcnt/include/dobjnames.h	2013-10-18 16:30:10.000000000 +0100
@@ -22,7 +22,9 @@
     ERR_TYPE,
     //---------------------------------------------
     // lists to be defined within a module
-    // or data object
+    // or data object... these lack any corresponding
+    // data structure, they merely exist to textually
+    // demarcate lists of data objects...
     //---------------------------------------------
     LST_ENVELOPE,
     LST_WAVEFORM,
diff -x wcnt -x '*.o' -x '*.wav' -x .git -x errocid.wc -ur ./include/synthfilereader.h /home/sirrom/Projects/wcnt/include/synthfilereader.h
--- ./include/synthfilereader.h	2013-10-19 15:18:31.000000000 +0100
+++ /home/sirrom/Projects/wcnt/include/synthfilereader.h	2013-10-17 18:37:44.000000000 +0100
@@ -105,8 +105,8 @@
     bool read_ui_modparam(synthmod::base*, param::TYPE);
     bool read_ui_moddobj(synthmod::base*, dobj::TYPE, dobj::TYPE);
 
-    bool read_ui_dobjitems(dobj::base*);
-    bool read_ui_dobjparam(dobj::base*, param::TYPE);
+    bool read_ui_dobjitems(dobj::base*, const char* parent);
+    bool read_ui_dobjparam(dobj::base*, param::TYPE, const char* parent);
     bool read_ui_dobjdobj(dobj::base*, dobj::TYPE, dobj::TYPE);
 /*
     // method to read sub-parts of standalone dobjs
@@ -115,8 +115,7 @@
     // method to read parameters of dobjs
     bool read_dobj_params(dobj::base*, const char* endterm);
 */
-    const std::string*
-        read_string_list_param(const char* enda, const char* endb);
+    std::string* read_string_list_param(const char* enda, const char* endb);
     // method for ......
     bool eff_ing_header_bodge(samp_t *samplerate);
     void register_ui();
diff -x wcnt -x '*.o' -x '*.wav' -x .git -x errocid.wc -ur ./include/ui_dobjitem.h /home/sirrom/Projects/wcnt/include/ui_dobjitem.h
--- ./include/ui_dobjitem.h	2013-10-19 15:18:31.000000000 +0100
+++ /home/sirrom/Projects/wcnt/include/ui_dobjitem.h	2013-10-18 16:18:38.000000000 +0100
@@ -32,13 +32,11 @@
     }
 
     dobjitem* get_next_of_type() {
-        std::cout << "result: "<<(void*)result<<std::endl;
         result = find_in_data(result->get_next(), search);
-        std::cout << "find in data... result: "<<(void*)result<<std::endl;
         return result->get_data();
     }
 
-    linkedlist* items_for_dobj(dobj::TYPE dt) {
+    linkedlist* items_for_data_object(dobj::TYPE dt) {
         return new_list_of_by(this, dt);
     }
 
Binary files ./include/ui_moditem.h and /home/sirrom/Projects/wcnt/include/ui_moditem.h differ
diff -x wcnt -x '*.o' -x '*.wav' -x .git -x errocid.wc -ur ./Makefile /home/sirrom/Projects/wcnt/Makefile
--- ./Makefile	2013-10-19 15:18:31.000000000 +0100
+++ /home/sirrom/Projects/wcnt/Makefile	2013-10-18 17:20:03.000000000 +0100
@@ -21,7 +21,7 @@
 # NOTE_EDIT_DEBUG=display note_data debugging info.
 # SANITY_CHECKS = Some sort of half assed check for program sanity.
 
-DEFS=-ggdb -fno-inline -DWITH_LADSPA -DDEBUG #-DSANITY_CHECKS
+DEFS=-ggdb -fno-inline -DWITH_LADSPA -DDEBUG -DSTR_DEBUG #-DSANITY_CHECKS
 
 # nothing to be modified further:
 PROG=wcnt
diff -x wcnt -x '*.o' -x '*.wav' -x .git -x errocid.wc -ur ./src/adsrcoord.cc /home/sirrom/Projects/wcnt/src/adsrcoord.cc
--- ./src/adsrcoord.cc	2013-10-19 15:18:31.000000000 +0100
+++ /home/sirrom/Projects/wcnt/src/adsrcoord.cc	2013-10-18 17:32:19.000000000 +0100
@@ -19,7 +19,7 @@
 
 void adsr_coord::register_ui()
 {
-    register_param(param::ADSRSECT, "attack/decay/sustain/release");
+    register_param(param::ADSRSECT, "attack/decay/release");
     register_param(param::UPTIME);
     register_param(param::UPLEVEL);
     register_param(param::LOTIME);
diff -x wcnt -x '*.o' -x '*.wav' -x .git -x errocid.wc -ur ./src/cmdline.cc /home/sirrom/Projects/wcnt/src/cmdline.cc
--- ./src/cmdline.cc	2013-10-19 15:18:31.000000000 +0100
+++ /home/sirrom/Projects/wcnt/src/cmdline.cc	2013-10-18 17:31:19.000000000 +0100
@@ -13,6 +13,8 @@
 #include "../include/synth.h"
 
 #include "../include/textstuff.h"
+#include "../include/ui_dobjitem.h"
+#include "../include/ui_moditem.h"
 
 #include <cstring>
 #include <cstdlib>
@@ -289,9 +291,11 @@
         synthmod::names::type((n != 0 && n < opts_count)
             ? opts[n] : "" );
     if (smt == synthmod::NONEZERO) {
-        msg="\nThe module definition requested is a secret module which"
-            " is used whenever an\ninput is turned 'off'. What did you"
-            " expect?";
+        if (wcnt::jwm.is_verbose())
+            msg="\n;The 'none' module is a secretive module used whenever "
+                "\n;any input is turned 'off'. It provides a zero or "
+                "\n;equivalent value while the module ensures that the"
+                "\n;expected 'off' behaviour is exhibited.";
         return;
     }
     if (smt == synthmod::ERR_TYPE) {
@@ -335,8 +339,7 @@
             return;
         }
     }
-    synthmod::base* sm =
-                wcnt::jwm.get_modlist()->create_module(smt, "username");
+    synthmod::base* sm = synthmod::list::create_module(smt, "username");
     msg = "\n";
     msg += synthmod::names::get(smt);
     if (sm == 0) {
@@ -357,65 +360,44 @@
         msg += "\n//----";
     }
 
-    std::cout << "***** FIXME *****\nuse new ui_moditem derived classes"
-                                                            << std::endl;
-
-/*
-    dobj_help(smt);
-    modinputlist::linkedlist* inlist =
-        new_list_of_by(wcnt::get_inputlist(), sm->get_module_type());
-                    //jwm.get_inputlist()->getinputlist_for_module(sm);
-    modinput* mi = inlist->goto_first();
+    ui::moditem_list::linkedlist* items = wcnt::get_ui_moditem_list()
+                                                ->items_for_module(smt);
+    ui::moditem* item = items->goto_first();
+    int mxl = 0;
     const char* spc = spaces::get(40);
-    if (mi) {
-        msg += "\n// inputs for ";
-        msg += synthmod::names::get(smt);
-        int mxl = 0;
-        std::string in;
-        while(mi) { // get max len of input name
-            in = input::names::get(mi->get_inputtype());
-            int l = in.length();
-            if (l > mxl) mxl = l;
-            mi = inlist->goto_next();
-        }
-        mxl += 2;
-        mi = inlist->goto_first();
-        while(mi) {
-            input::TYPE it = mi->get_inputtype();
-            std::string in = input::names::get(it);
-            msg += "\n    " + in;
-            msg.append(spc, mxl - in.length());
-            msg += "modulename outputname";
-            mi = inlist->goto_next();
-            if (wcnt::jwm.is_verbose()) {
-                const char* descr = input::names::descr(it);
-                msg += " // ";
-                msg += descr;
-            }
-        }
-    }
-    delete inlist;
-    modparamlist::linkedlist* parlist =
-            new_list_of_by(wcnt::get_paramlist(), sm->get_module_type());
-    modparam* param = parlist->goto_first();
-    if (param) {
-        msg += "\n// parameters for ";
-        msg += synthmod::names::get(smt);
-        int mxl = 0;
-        std::string pn;
-        while(param) {
-            pn = param::names::get(param->get_paramtype());
-            int l = pn.length();
-            if (l > mxl) mxl = l;
-            param = parlist->goto_next();
-        }
-        mxl += 2;
-        param = parlist->goto_first();
-        while(param) {
-            param::TYPE pt = param->get_paramtype();
-            pn = param::names::get(pt);
-            msg += "\n    " + pn;
-            msg.append(spc, mxl - pn.length());
+
+    while(item) {
+        int l = 0;
+        switch(item->get_item_type()) {
+          case ui::UI_PARAM: {
+            ui::modparam* mp = static_cast<ui::modparam*>(item);
+            l = strlen(param::names::get(mp->get_param_type()));
+            break;
+          }
+          case ui::UI_INPUT: {
+            ui::modinput* mi = static_cast<ui::modinput*>(item);
+            l = strlen(input::names::get(mi->get_input_type()));
+            break;
+          }
+          default:
+            l = 0;
+        }
+        if (mxl < l)
+            mxl = l;
+        item = items->goto_next();
+    }
+    mxl += 2;
+
+    item = items->goto_first();
+    while(item) {
+        switch(item->get_item_type()) {
+          case ui::UI_PARAM: {
+            ui::modparam* mp = static_cast<ui::modparam*>(item);
+            param::TYPE pt = mp->get_param_type();
+            const char* s = param::names::get(pt);
+            msg += "\n    ";
+            msg += s;
+            msg.append(spc, mxl - strlen(s));
             iocat::TYPE ioc = param::names::category(pt);
             if (ioc == iocat::FIX_STR) {
                 fixstrparam* fsp;
@@ -427,18 +409,40 @@
             }
             else
                 msg += iocat::names::get(ioc);
-
             if (wcnt::jwm.is_verbose()) {
                 const char* descr = param::names::descr(pt);
                 msg += " // ";
                 msg += descr;
             }
-
-            param = parlist->goto_next();
+            break;
+          }
+          case ui::UI_INPUT: {
+            ui::modinput* mi = static_cast<ui::modinput*>(item);
+            input::TYPE it = mi->get_input_type();
+            const char* s = input::names::get(it);
+            msg += "\n    ";
+            msg += s;
+            msg.append(spc, mxl - strlen(s));
+            msg += "modulename outputname";
+            if (wcnt::jwm.is_verbose()) {
+                const char* descr = input::names::descr(it);
+                msg += " // ";
+                msg += descr;
+            }
+            break;
+          }
+          case ui::UI_DOBJ: {
+            ui::moddobj* md = static_cast<ui::moddobj*>(item);
+            dobj_help(md->get_dobj_parent(), md->get_dobj_child(), 1);
+          }
+          default:
+            break;
         }
+        item = items->goto_next();
     }
-    delete parlist;
-*/
+
+    delete items;
+
     modoutputlist::linkedlist* outlist =
         new_list_of_by(wcnt::get_outputlist(), sm);
 
@@ -466,11 +470,106 @@
     return;
 }
 
+void
+cmdline::dobj_help(dobj::TYPE parent, dobj::TYPE child, int indent_level)
+{
+    const char* spc = spaces::get(40);
+    const char* enclosure = dobj::names::get(parent);
+
+    if (indent_level > 4)
+        indent_level = 4;
+
+    msg += "\n";
+    msg.append(spc, indent_level * 4);
+    msg += enclosure;
+
+    dobj_help_items(child, indent_level + 1);
+
+    msg += "\n";
+    msg.append(spc, indent_level * 4);
+    msg += enclosure;
+}
+
+void cmdline::dobj_help_items(dobj::TYPE dt, int indent_level)
+{
+    dobj::base* dob = dobj::list::create_dobj(dt);
+    ui::dobjitem_list::linkedlist* items = wcnt::get_ui_dobjitem_list()
+                                         ->items_for_data_object(dt);
+    const char* spc = spaces::get(40);
+
+    if (indent_level > 4)
+        indent_level = 4;
+
+    msg += "\n";
+    msg.append(spc, indent_level * 4);
+    msg += dobj::names::get(dt);
+
+    ++indent_level;
+
+    ui::dobjitem* item = items->goto_first();
+
+    // get length of longest parameter name.
+    int mxl = 0;
+    while(item) {
+        int l = 0;
+        if (item->get_item_type() == ui::UI_PARAM) {
+            ui::dobjparam* dp = static_cast<ui::dobjparam*>(item);
+            l = strlen(param::names::get(dp->get_param_type()));
+        }
+        if (mxl < l)
+            mxl = l;
+        item = items->goto_next();
+    }
+    mxl += 2;
+
+    item = items->goto_first();
+    while(item) {
+        switch(item->get_item_type()) {
+          case ui::UI_PARAM: {
+            ui::dobjparam* dp = static_cast<ui::dobjparam*>(item);
+            param::TYPE pt = dp->get_param_type();
+            const char* s = param::names::get(pt);
+            msg += "\n";
+            msg.append(spc, indent_level * 4);
+            msg += s;
+            msg.append(spc, mxl - strlen(s));
+            iocat::TYPE ioc = param::names::category(pt);
+            if (ioc == iocat::FIX_STR) {
+                fixstrparam* fsp;
+                fsp = wcnt::get_fxsparamlist()->get_fix_str_param(pt);
+                if (fsp)
+                    msg += fsp->get_string_list();
+                else
+                    msg += "fixstringparam problem";
+            }
+            else
+                msg += iocat::names::get(ioc);
+            if (wcnt::jwm.is_verbose()) {
+                const char* descr = param::names::descr(pt);
+                msg += " // ";
+                msg += descr;
+            }
+            break;
+          }
+          case ui::UI_DOBJ: {
+            ui::dobjdobj* dd = static_cast<ui::dobjdobj*>(item);
+            dobj_help(dd->get_dobj_parent(), dd->get_dobj_child(),
+                                                        indent_level + 1);
+          }
+          default:
+            break;
+        }
+        item = items->goto_next();
+    }
+    delete items;
+}
+
+
+/*
 void cmdline::dobj_help(synthmod::TYPE smt)
 {
     std::cout << "***** FIXME *****\nuse new ui_moditem derived classes"
                                                             << std::endl;
-/*
     moddobj* mdbj = wcnt::get_moddobjlist()->get_first_of_type(smt);
     // forgot that some modules have more than one list.... so we do want
     // to get a moddobjlist and not just a moddobj from moddobjlist.
@@ -500,8 +599,8 @@
         mdbj = wcnt::get_moddobjlist()->get_next_of_type();
     }
     msg += "\n";
-*/
 }
+*/
 
 void cmdline::dobj_help()
 {
@@ -591,12 +690,12 @@
 */
 #endif
 }
-
+/*
 void cmdline::dobj_help_params(dobj::TYPE dt, int level)
 {
     std::cout << "***** FIXME *****\nuse new ui_moditem derived classes"
                                                             << std::endl;
-/*    dobjparamlist::linkedlist*
+    dobjparamlist::linkedlist*
         dparlist = new_list_of_by(wcnt::get_dparlist(), dt);
 
     if (!dparlist) {
@@ -648,8 +747,8 @@
         dparam = dparlist->goto_next();
     }
     delete dparlist;
-*/
 }
+*/
 
 void cmdline::input_help()
 { 
@@ -711,12 +810,11 @@
         for (i = synthmod::ERR_TYPE + 1; i < synthmod::LAST_TYPE; i++)
         {
             if (i != synthmod::NONEZERO) {
-                sm = wcnt::jwm.get_modlist()->create_module(
-                                            (synthmod::TYPE) i,
+                sm = synthmod::list::create_module((synthmod::TYPE)i,
                                 synthmod::names::get((synthmod::TYPE)i));
                 if (!sm) {
                     msg += "\nnot enough memory to process request to"
-                        "create synthmodule type: ";
+                                            "create synthmodule type: ";
                     msg += synthmod::names::get((synthmod::TYPE)i);
                     return;
                 }
Binary files ./src/main.cc and /home/sirrom/Projects/wcnt/src/main.cc differ
diff -x wcnt -x '*.o' -x '*.wav' -x .git -x errocid.wc -ur ./src/oscclock.cc /home/sirrom/Projects/wcnt/src/oscclock.cc
--- ./src/oscclock.cc	2013-10-19 15:18:31.000000000 +0100
+++ /home/sirrom/Projects/wcnt/src/oscclock.cc	2013-10-17 20:05:51.000000000 +0100
@@ -22,16 +22,13 @@
     register_input(input::IN_NOTE_ON_TRIG);
     register_input(input::IN_NOTE_SLIDE_TRIG);
     register_input(input::IN_PLAY_STATE);
-
+    register_input(input::IN_FREQ);
     register_param(param::OCTAVE);
     register_param(param::TUNING_SEMITONES);
-
-    register_input(input::IN_FREQ);
     register_input(input::IN_FREQ_MOD1);
     register_param(param::FREQ_MOD1SIZE);
     register_input(input::IN_FREQ_MOD2);
     register_param(param::FREQ_MOD2SIZE);
-
     register_param(param::PORTAMENTO);
     register_param(param::RESPONSE_TIME);
 }
diff -x wcnt -x '*.o' -x '*.wav' -x .git -x errocid.wc -ur ./src/riffnode.cc /home/sirrom/Projects/wcnt/src/riffnode.cc
--- ./src/riffnode.cc	2013-10-19 15:18:31.000000000 +0100
+++ /home/sirrom/Projects/wcnt/src/riffnode.cc	2013-10-18 17:43:04.000000000 +0100
@@ -18,9 +18,9 @@
 {
     register_param(param::RIFFNAME);
     register_param(param::BAR);
-    register_param(param::TRANSPOSE);
     register_param(param::REPEAT);
     register_param(param::REPEAT_STRIPE);
+    register_param(param::TRANSPOSE);
 }
 
 riff_node::~riff_node()
diff -x wcnt -x '*.o' -x '*.wav' -x .git -x errocid.wc -ur ./src/sequencer.cc /home/sirrom/Projects/wcnt/src/sequencer.cc
--- ./src/sequencer.cc	2013-10-19 15:18:31.000000000 +0100
+++ /home/sirrom/Projects/wcnt/src/sequencer.cc	2013-10-18 17:44:35.000000000 +0100
@@ -53,12 +53,12 @@
 void sequencer::register_ui()
 {
     register_dobj(dobj::LST_TRACK, dobj::SIN_RIFFNODE);
+    register_param(param::START_BAR);
     register_input(input::IN_BAR);
     register_input(input::IN_BAR_TRIG);
-    register_input(input::IN_POS_STEP_SIZE);
     register_input(input::IN_BEATS_PER_BAR);
     register_input(input::IN_BEAT_VALUE);
-    register_param(param::START_BAR);
+    register_input(input::IN_POS_STEP_SIZE);
     register_param(param::VELOCITY_RESPONSE);
 }
 
diff -x wcnt -x '*.o' -x '*.wav' -x .git -x errocid.wc -ur ./src/synthfilereader.cc /home/sirrom/Projects/wcnt/src/synthfilereader.cc
--- ./src/synthfilereader.cc	2013-10-19 15:18:31.000000000 +0100
+++ /home/sirrom/Projects/wcnt/src/synthfilereader.cc	2013-10-18 16:19:43.000000000 +0100
@@ -349,23 +349,6 @@
     }
     synthmod::base* sm
         = synthmod::list::create_module(smt,modname.c_str());
-    /*
-    if (!read_dobjs(sm)){
-        wc_err("In module %s, %s.", sm->get_username(), wc_err_msg);
-        delete sm;
-        return 0;
-    }
-    if (!read_inputs(sm)){
-        wc_err("In module %s, %s.", sm->get_username(), wc_err_msg);
-        delete sm;
-        return 0;
-    }
-    if (!read_params(sm)){
-        wc_err("In module %s, %s.", sm->get_username(), wc_err_msg);
-        delete sm;
-        return 0;
-    }
-    */
 
     if (!read_ui_moditems(sm)) {
         wc_err("In module %s, %s.", sm->get_username(), wc_err_msg);
@@ -457,25 +440,12 @@
     }
     dob->set_username(dobjname.c_str());
 
-    if (!read_ui_dobjitems(dob)) {
+    if (!read_ui_dobjitems(dob, 0)) {
         wc_err("In data object %s, %s.", dob->get_username(), wc_err_msg);
         delete dob;
         return 0;
     }
 
-/*
-    // read dobj parameters (if any)
-    if (!read_dobj_params(dbj, 0)){
-        wc_err("In data object %s %s.", dbj->get_username(), wc_err_msg);
-        delete dbj;
-        return 0;
-    }
-    // read dobj's dobjies (if any)
-    if (!read_dobjs(dbj)){
-        delete dbj;
-        return 0;
-    }
-*/
     if (include_dbj(dob->get_username())) {
         if (wcnt::jwm.is_verbose()) cout << "---- validating..." << endl;
         errors::TYPE et = dob->validate();
@@ -497,186 +467,11 @@
         delete dob;
         return 0;
     }
-    // read_dobjs(dobj::base*) stops when it encounters the username of the dobj
     return dob;
 }
 
-//------------------------------------------------------------------------
-// bool synthfilereader::read_dobjs(dobj::base* dbj)
-// only reads those data objects which are defined within a dobj
-//------------------------------------------------------------------------
-// read the dobjs (data objects) for the dobj.
-//---
-// return true  if succesful.
-// return true  if dobj contains no dobjies
-// return false if it landed on it's backside.
-//--
-/*
-bool synthfilereader::read_dobjs(dobj::base* dbj)
-{
-    dobj::TYPE dt = dbj->get_object_type();
-
-    ui::dobjitem_list* p_items = wcnt::get_ui_dobjitem_list();
-    ui::dobjitem* p_item = p_items->get_first_of_type(dt);
-
-    while(p_item) {
-        if (*p_item == ui::UI_DOBJ) {
-            
-        }
-        p_item = p_items->get_next_of_type();
-    }
-
-    return true;
-
-    dobjdobjlist* enc_list = wcnt::get_topdobjlist()->get_first_of_type(dt);
-    if (!enc_list) // not dobjs in this dbj dobj
-        return true;
-    while(enc_list) {
-        dobjdobj* enc_dobj = enc_list->goto_first();
-        string enc_com = read_command();
-        dobj::TYPE enc_type = enc_dobj->get_dobj_sprog();
-        const char* enc_name = dobj::names::get(enc_type);
-        if (enc_com != enc_name) {
-            wc_err("In data object %s expected %s got %s instead.",
-                    dbj->get_username(), enc_name, enc_com.c_str());
-            return false;
-        }
-        dobjdobjlist* dd_list;
-        dd_list = enc_list->get_dobjdobjlist_for_dobjtype(enc_type);
-        dobjdobj* dd = dd_list->goto_first();
-        if (wcnt::jwm.is_verbose())
-            cout << "-------- for " << enc_name << endl;
-        while(dd) {
-            const char* com = read_command();
-            dobj::TYPE sprogtype = dd->get_dobj_sprog();
-            const char* sprogname = dobj::names::get(sprogtype);
-            while (strcmp(com, enc_name) != 0) {
-                if (strcmp(com, sprogname) != 0) {
-                    wc_err("In data object %s expected %s got %s instead.",
-                            dbj->get_username(), sprogname, com);
-                    delete dd_list;
-                    return false;
-                }
-                dobj::base* sprog =
-                    wcnt::get_dobjlist()->create_dobj(sprogtype);
-                if (sprog == 0) {
-                    wc_err("%s could not create data object %s for data "
-                                        " object %s.", errors::stock::major,
-                                        sprogname, dbj->get_username());
-                    delete dd_list;
-                    return false;
-                }
-                if (wcnt::jwm.is_verbose())
-                    cout << "-------- creating " << sprogname << endl;
-                if (!read_dobj_params(sprog, enc_com.c_str())) {
-                    wc_err("In data object %s %s.", dbj->get_username(),
-                                                    wc_err_msg);
-                    delete sprog;
-                    delete dd_list;
-                    return false;
-                }
-                if (include_dbj(dbj->get_username())) {
-                    errors::TYPE et = sprog->validate();
-                    if (et != errors::NO_ERROR) {
-                        wc_err("Data object %s has error in %s %s %s %s.",
-                                dbj->get_username(),
-                                sprogname,
-                                dobj::base::get_error_msg(),
-                                errors::stock::get_prefix_msg(et),
-                                errors::stock::get(et));
-                        delete sprog;
-                        delete dd_list;
-                        return false;
-                    }
-                    // add sprog to dbj, not dobjlist  . . .
-                    if (!dbj->add_dobj(sprog)) {
-                        wc_err("%s Could not add data object %s to data"
-                                        " object %s.", errors::stock::major,
-                                           sprogname, dbj->get_username(),
-                                            dobj::base::get_error_msg());
-                        delete sprog;
-                        delete dd_list;
-                        return false;
-                    }
-                }
-                else
-                    delete sprog;
-                if (wcnt::jwm.is_verbose())
-                    cout << "added " << sprogname << endl;
-                com = read_command();
-            }
-            dd = dd_list->goto_next();
-        }
-        delete dd_list;
-        enc_list = wcnt::get_topdobjlist()->get_next_of_type();
-    }
-    return true;
-}
-
-//------------------------------------------------------------------------
-// bool synthfilereader::read_dobj_params(dobj::base* dbj)
-// reads dparams for all data objects
-//------------------------------------------------------------------------
-// return true  if succesful.
-// return false on fail.
-// enda & endb in most instances are both NULL. they should only be used
-// when reading an EDIT dobj type contained in an EDIT_LST dobjtype. they
-// point to a char string which is the EDIT dobj name, and another which 
-// is the EDITLIST dobj name and are used to terminate reading strings
-// to add to the string list param::TYPE PAR_STR_LIST.
-
-bool synthfilereader::
-read_dobj_params(dobj::base* dbj, const char* endterm)
-{
-    dobj::TYPE dobjtype = dbj->get_object_type();
-    dobjparamlist::linkedlist*
-        parlist = new_list_of_by(wcnt::get_dparlist(), dobjtype);
-
-    dobjparam* param = parlist->goto_first();
-    const char* enda = dobj::names::get(dobjtype);
-    while(param) {
-        ostringstream conv;
-        param::TYPE pt = param->get_partype();
-        const char* parname = 0;
-        if (pt != param::STR_UNNAMED && pt != param::STR_LIST)
-            parname = read_command();
-        string* datastr;
-        if (pt == param::STR_LIST) {
-            datastr = (string*)read_string_list_param(enda, endterm);
-            if (!datastr) {
-                delete parlist;
-                return false;
-            }
-        }
-        else {
-            datastr = new string;
-            *synthfile >> *datastr;
-        }
-        if (inc_current) {
-            const char* val = datastr->c_str();
-            if (!setpar::set_param(dbj, parname, pt, val, &conv)) {
-                wc_err("%s %s", setpar::get_error_msg(),
-                                dobj::base::get_error_msg());
-                delete datastr;
-                delete parlist;
-                return false;
-            }
-        }
-        delete datastr;
-        if (wcnt::jwm.is_verbose()) {
-            if (parname)
-                cout << "parameter " << parname;
-            cout << "\t" << conv.str() << endl;
-        }
-        param = parlist->goto_next();
-    }
-    delete parlist;
-    return true;
-}
-*/
-const string* 
-synthfilereader::read_string_list_param
-    (const char* enda, const char* endb)
+string*  synthfilereader::read_string_list_param (const char* enda,
+                                                  const char* endb)
 {
     #ifdef STR_DEBUG
     cout << "read_string_list_param:";
@@ -785,47 +580,46 @@
 }
 
 
-bool synthfilereader::read_ui_dobjitems(dobj::base* dob)
+bool synthfilereader::read_ui_dobjitems(dobj::base* dob, const char* parent)
 {
     ui::dobjitem_list::linkedlist* items = wcnt::get_ui_dobjitem_list()
-                                ->items_for_dobj(dob->get_object_type());
-    ui::dobjitem* item = items->goto_first();
-
-    if (!item)
+                        ->items_for_data_object(dob->get_object_type());
+    if (!items)
         return true;
 
+    ui::dobjitem* item = items->goto_first();
+
     if (wcnt::jwm.is_verbose())
         cout << "--------" << endl;
 
     while(item) {
-        cout << "switching on dobjitem... " << (void*)item << endl;
-        item->dump();
         switch(item->get_item_type()) {
-        cout << " dobjparam" << endl;
           case ui::UI_PARAM: {
             ui::dobjparam* dp = static_cast<ui::dobjparam*>(item);
-            if (!read_ui_dobjparam(dob, dp->get_param_type())) {
-    cout << "fail :-(" << endl;
+            if (!read_ui_dobjparam(dob, dp->get_param_type(), parent)) {
+                delete items;
                 return false;
             }
             break;
           }
           case ui::UI_DOBJ: {
-        cout << " dobjdobj" << endl;
             ui::dobjdobj* dd = static_cast<ui::dobjdobj*>(item);
             if (!read_ui_dobjdobj(dob, dd->get_dobj_parent(),
-                                       dd->get_dobj_child())) {
-    cout << "fail :-(" << endl;
+                                       dd->get_dobj_child()))
+            {
+                delete items;
                 return false;
             }
             break;
           }
           default:
             wc_err("%s invalid ui element.", errors::stock::bad);
+            delete items;
             return false;
         }
         item = items->goto_next();
     }
+    delete items;
     return true;
 }
 
@@ -914,25 +708,37 @@
 
 
 bool
-synthfilereader::read_ui_dobjparam(dobj::base* dob, param::TYPE partype)
+synthfilereader::read_ui_dobjparam(dobj::base* dob, param::TYPE pt,
+                                                    const char* parent)
 {
-    string parname = read_command();
+    string parname;
+    if (pt != param::STR_UNNAMED && pt != param::STR_LIST)
+        parname = read_command();
 
     ostringstream conv;
-    string datastr;
-    *synthfile >> datastr;
+    string* datastr = 0;
 
-cout << "parname: " << parname << "datastr: " << datastr;
+    if (pt == param::STR_LIST) {
+        const char* dobjname = dobj::names::get(dob->get_object_type());
+        datastr = read_string_list_param(dobjname, parent);
+        if (!datastr)
+            return false;
+    }
+    else {
+        datastr = new string;
+        *synthfile >> *datastr;
+    }
 
     if (include_dbj(dob->get_username())) {
-        if (!setpar::set_param(dob, parname.c_str(), partype,
-                                     datastr.c_str(), &conv))
+        if (!setpar::set_param(dob, parname.c_str(), pt,
+                                     datastr->c_str(), &conv))
         {
             wc_err("%s", setpar::get_error_msg());
+            delete datastr;
             return false;
         }
     }
-
+    delete datastr;
     if (wcnt::jwm.is_verbose()) {
         cout << "parameter ";
         cout << parname << "\t" << conv.str() << endl;
@@ -975,7 +781,7 @@
             return false;
         }
 
-        if (!read_ui_dobjitems(dob)) {
+        if (!read_ui_dobjitems(dob, 0)) {
             wc_err("%s, %s %s", parentname, childname, wc_err_msg);
             delete dob;
             return false;
@@ -1033,7 +839,6 @@
     // now read the list of items (each item's type is sprogtype)
     while (strcmp(parentname, com) != 0) {
         if (strcmp(com, childname) != 0) {
-            cout << "ooo shit\n";
             // check name of item matches expected
             wc_err("data object %s expected %s got %s instead",
                                     parentname, childname, com);
@@ -1051,7 +856,7 @@
             return false;
         }
 
-        if (!read_ui_dobjitems(cdob)) {
+        if (!read_ui_dobjitems(cdob, parentname)) {
             wc_err("%s, %s %s", parentname, childname, wc_err_msg);
             delete cdob;
             return false;
@@ -1088,11 +893,8 @@
             cout << "added data object " << childname << endl;
 
         com = read_command();
-        cout << "com: " << com << "\tparent: " << parentname << endl;
     }
 
-    cout << "breaking out, it's true!" << endl;
-
     return true;
 }
 
Only in /home/sirrom/Projects/wcnt/tests: unnamed_str.wc
