wcnt/jwmsynth  // <-- that header must be on first line (and last line too)
//------------------------------------------------------------------
// demo2.wc //
//------------------
//
// using modules: riff, sequencer, osc_clock + sinewave, adsr, amp, wavfileout
// lfo_clock + sinewave, sampler, mix_chan(s) + mixer
// this--> // signifies to wcnt to ignore the rest of the line:
//
// comments can be placed anywhere except inbetween a 'command' and it's value. ie 
//
//		riff // **cannot have comment here** kickriff1
// or
//		in_frequency //**or here**	seq1 //**or here** out_frequency 
// but
// 		riff kickriff1 // **this is ok**
//------------------------------------
// use whitespace as you wish.
// ie:
//	in_frequency
//		seq1 out_frequency
//-------------------------------------------------------------------
//
// wcnt 'expects' more header info next, in the following order

samplerate 	44100
bpm		160
signature 	4/4

// exit_bar tells the synth when to finish, regardless of anything else
// otherwise it would go on for ever or until it crashed.
// bar 0 is the first bar. stop when exit_bar is reached.
exit_bar 4
// end of header

// all the modules and riff's and wavfilein's can be defined in any order
// but the parts of each module are expected to be defined in specific order ;)

// note length and position translation:
// note_length : <-- whole half quarter eigth sixteenth thirtysecond -->
// length value: <-- 256   128  64      32    16        8 -->
riff 
kickriff1
// 		name position length velocity
	note c0		0 		28		1.0
	note c0		32		18		0.75
	note c0		96		10		0.6
	note c0		128		14		1.0
	note c0		144		32		0.4
	note c0		192		16		0.7
kickriff1

riff 
kickriff2
// 		name position length velocity
	note c0		0 		32		1.0
	note c0		64		32		0.8
	note c0		128		32		0.6
	note c0		192		32		1.0
kickriff2

sequencer 
kickseq
	track 	// riffname	bar position
		kickriff1 		0
		kickriff1 		1
		kickriff1 		2
		kickriff2 		3
	track
	velocity_response_time	20	// in some conditions can help prevent nasting popping sounds from
					// sudden changes of velocity ie when velocity is used by amplifier
kickseq 

riff 
snareriff1
	// 	name position length velocity
	note c0		64		16		0.8
	note c0		160		30		1.0
	note c0		192		20		0.7
	note c0		224		16		0.5
snareriff1

riff 
snareriff2
	// 	name position length velocity
	note c0		64		32		0.8
	note c0		128		30		0.8
	note c0		160		14		1.0
	note d0		176		14		0.8
	note c0		192		14		0.8
	note d0		224		14		0.6
	note c0		240		14		0.4
snareriff2

sequencer
snareseq
	track	// riffname	bar position
		snareriff1		0
		snareriff1		1
		snareriff1		2
		snareriff2		3
	track
	velocity_response_time	20	// in some conditions can help prevent nasting popping sounds from
					// sudden changes of velocity ie when velocity is used by amplifier
snareseq

adsr  
kickadsr
// adsr is really two adsr's:
// high velocity (1.0) outputs upper adsr low velocity (0.0) outputs lower adsr
// any other velocity outputs in-between. sustain section is held until note_off
// and it's level is the same as decay level it is automatically generated so you don't have to.
// note that all the velocity input does is modulate between the two shapes,
// it does not change the 'loudness'.
//			up time(ms)	up level	low time(ms)low level
	envelope
		attack	5.0		1.0			15.0		0.45
		attack	5.0		0.9			15.0		0.80
		decay	70.0		0.9			45.0		0.75
		decay	45.0		0.8			10.0		0.65
		release	45.0		0.25			35.0		0.25
		release	15.0		0.0			25.0		0.0
	envelope
	in_note_on_trig		kickseq		out_note_on_trig
	in_note_off_trig	kickseq 	out_note_off_trig
	in_velocity 		kickseq 	out_velocity //negative inverted.  
	sustain_state 		on
	zero_retrigger		off
kickadsr

adsr  
snareadsr
// adsr is really two adsr's:
// high velocity (1.0) outputs upper adsr low velocity (0.0) outputs lower adsr
// any other velocity outputs in-between. sustain section is held until note_off
// and it's level is the same as decay level it is automatically generated so you don't have to.
//
//			up time(ms)	up level	low time(ms)low level
	envelope
		attack	15.0		1.0			25.0		0.45
		attack	15.0		0.9			25.0		0.80
		decay	50.0		0.9			75.0		0.75
		decay	75.0		0.8			70.0		0.65
		release	65.0		0.25			45.0		0.25
		release	55.0		0.0			15.0		0.0
	envelope
	in_note_on_trig		snareseq		out_note_on_trig
	in_note_off_trig	snareseq 		out_note_off_trig
	in_velocity 		snareseq 		out_velocity //negative inverted.
	sustain_state 		on
	zero_retrigger		off
snareadsr


osc_clock
kickosc
	in_note_on_trig		kickseq	out_note_on_trig
	in_note_slide_trig	kickseq	out_note_slide_trig
	in_frequency		kickseq	out_frequency
	in_freq_mod1		off
	in_freq_mod2		off
	octave_offset	0
	tuning_semitones 0.0
	portamento_time	50.0
	freq_mod1_size	1.0
	freq_mod2_size	1.0
kickosc

osc_clock
snareosc
	in_note_on_trig		snareseq	out_note_on_trig
	in_note_slide_trig	snareseq	out_note_slide_trig
	in_frequency		snareseq	out_frequency
	in_freq_mod1		off
	in_freq_mod2		off
	octave_offset	0
	tuning_semitones -2.0
	portamento_time	50.0
	freq_mod1_size	1.0
	freq_mod2_size	1.0
snareosc


lfo_clock
lfo_clock1
	in_phase_trig	snareseq out_start_trig
	in_freq_mod1	off
	in_freq_mod2	off
	freq		10.00
	freq_mod1_size	1.0
	freq_mod2_size	1.0
lfo_clock1

tri_wave
lfo1wave
	in_phase_trig	lfo_clock1	out_phase_trig
	in_deg_size	lfo_clock1	out_deg_size
	recycle_mode	off
	zero_retrigger	off
lfo1wave

lfo_controller
lfo1ctrl
	in_trig		snareseq out_note_on_trig
	in_waveform	lfo1wave out_output
	in_amp_mod	snareseq out_velocity
	delay_time	75.00
	ramp_time	75.00
	start_level	0.00
	end_level	1.00
	amp_mod_size	1.00
lfo1ctrl

// to use the sampler we need to open the wav with wavfilein
// more than one sampler can use the same wav.
// include the path if need be
wavfilein kick.wav  
wavfilein snare.wav

sampler
kicksampler
	in_play_trig	kickseq out_note_on_trig
	in_deg_size	kickosc out_deg_size
	in_start_pos_mod off
	wavfile kick.wav // <--use the filename ie if the filename includes the path, include path here also
	start_pos_min	0
	start_pos_max	0
	loop_mode	off
	loop_start_pos	100
	loop_end_pos	200
	anti_clip_samples 50
	root_note	c0
	degsize_amount	1.00
kicksampler

sampler
snaresampler
	in_play_trig	snareseq out_note_on_trig
	in_deg_size	snareosc out_deg_size
	in_start_pos_mod off
	wavfile snare.wav // <--use the filename ie if the filename includes the path, include path here also
	start_pos_min	0
	start_pos_max	0
	loop_mode	off
	loop_start_pos	100
	loop_end_pos	200
	anti_clip_samples 50
	root_note	c0
	degsize_amount	1.00
snaresampler

stereo_amp
kickamp					// (mono) signal (within range -1.0 to 1.0 ):
	in_signal	kicksampler	out_l	// to amplify (to range -32767 to 32767):
	in_amp_eg	kickadsr	out_output 	// <- amplitude shape signal
	in_amp_mod	kickseq		out_velocity	// <- amplitude modulation signal
	in_pan_mod	off			// <- panning modulation signal
	amplitude	32000			// <- -32767 to 32767  (negative inverts)
	amp_mod_size	0.75			// <- ratio module amplitude by in_amp_mod input
	pan		0.00  			// <- -1 left 0 center 1 right
	pan_mod_size	0.99 			// <- -0.999... to 0.999...
	clip_mode	invert_clip		// <- clip or invert_clip - cut or invert excess 
	clip_level	32000		// <- -32767 to 32767 chop off level
	dc_level	0		// <- -32767 to 32767 
						// dc_level: amount to offset amplified signal:
						// note: dc_level is also shaped by in_amp_eg etc
kickamp

stereo_amp
snareamp				// (mono) signal (within range -1.0 to 1.0 ):
	in_signal	snaresampler	out_l	// to amplify (to range -32767 to 32767):
	in_amp_eg	snareadsr	out_output 	// <- amplitude shape signal
	in_amp_mod	snareseq	out_velocity	// <- amplitude modulation signal
	in_pan_mod	lfo1ctrl	out_output	// <- panning modulation signal
	amplitude	32000			// <- -32767 to 32767  (negative inverts)
	amp_mod_size	0.15			// <- ratio module amplitude by in_amp_mod input
	pan		0.00  			// <- -1 left 0 center 1 right
	pan_mod_size	0.99 			// <- -0.999... to 0.999...
	clip_mode	clip			// <- clip or invert_clip - cut or invert excess 
	clip_level	32767			// <- -32767 to 32767 chop off level
	dc_level	0				// <- -32767 to 32767 
									// dc_level: amount to offset amplified signal:
									// note: dc_level is also shaped by in_amp_eg etc
snareamp

mix_chan
kickchan
	in_left		kickamp out_left
	in_right	kickamp out_right
kickchan

mix_chan
snarechan
	in_left		snareamp out_left
	in_right	snareamp out_right
snarechan

mixer mixer
	desk
		kickchan
		snarechan
	desk
	master_level 1.0
mixer

wavfile_out
wavout
	in_left		mixer	out_left  // <- amplified signal (range -32767 to 32767)
	in_right	mixer	out_right // <- amplified signal
	filename	demo2.wav		// <- any valid filename
	write_from_bar	0 // begin on start of 1st bar
	write_to_bar	4 // end on start of 3nd bar 
	// use start_sample	as alternative 
	// use end_sample as alternative
wavout

wcnt/jwmsynth
